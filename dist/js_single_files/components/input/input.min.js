((bbn)=>{let script=document.createElement('script');script.innerHTML=`<div :class="[
 componentClass, 'bbn-textbox', {
  'bbn-disabled': !!disabled,
  'bbn-input-button-left' : !!buttonLeft,
  'bbn-input-button-right' : !!buttonRight,
  'bbn-invisible' : (type === 'hidden'),
    'bbn-input-nullable': isNullable
 }]"
 :style="(currentSize !== '') ? 'width:' + currentSize : '' "
>
  <div :class="{
    'bbn-w-100': (!buttonLeft && !buttonRight && !nullable),
    'bbn-flex-width' : (buttonLeft || buttonRight || nullable)
  }">
    <bbn-button v-if="buttonLeft"
          :icon="buttonLeft" 
          @click="$emit('clickLeftButton')"
          tabindex="-1"
          :class="[
            'bbn-button-left',
            'bbn-no-vborder',
            'bbn-m',
            {'bbn-invisible' : autoHideLeft}
          ]"
    ></bbn-button>
    <input :value="value"
          :type="currentType"
          :name="name"
          ref="element"
          :readonly="readonly"
          :disabled="disabled"
          :placeholder="placeholder"
          :maxlength="maxlength"
          :autocomplete="currentAutocomplete"
          :pattern="currentPattern"
          @input="emitInput($refs.element.value)"
          @click="click"
          @paste="$emit('paste', $event)"
          @focus="focus"
          @blur="blur"
          @change="change"
          @keydown="keydown"
          @keyup="keyup"
          @mouseenter="over"
          @mouseleave="out"
          :tabindex="tabindex"
          :class="{'bbn-flex-fill' : (buttonLeft || buttonRight || isNullable)}"
          :size="currentInputSize"
          :inputmode="inputmode"
          :min="min"
          :max="max"
    >
    <bbn-loadicon v-if="loading"></bbn-loadicon>
    <div v-else-if="isNullable && hasValue && !readonly && !disabled"
         class="bbn-block bbn-h-100 bbn-input-nullable-container">
      <i class="nf nf-fa-times_circle bbn-p"
         @mousedown.prevent.stop="clear"></i>
    </div>
    <bbn-button v-if="buttonRight"
                :icon="buttonRight"
                tabindex="-1"
                @click="$emit('clickRightButton')"
                :class="[
                  'bbn-button-right',
                  'bbn-no-vborder',
                  'bbn-m',
                  {'bbn-invisible' : autoHideRight}
                ]"
    ></bbn-button></div>
</div>`;script.setAttribute('id','bbn-tpl-component-input');script.setAttribute('type','text/x-template');document.body.insertAdjacentElement('beforeend',script);(function(bbn){"use strict";Vue.component("bbn-input",{mixins:[bbn.vue.basicComponent,bbn.vue.eventsComponent,bbn.vue.inputComponent],props:{loading:{type:[Boolean],default:false},autocomplete:{type:[Boolean,String],default:true},type:{type:String,default:'text'},buttonLeft:{type:String},buttonRight:{type:String},autoHideLeft:{type:Boolean,default:false},autoHideRight:{type:Boolean,default:false},actionLeft:{type:Function},actionRight:{type:Function},pattern:{type:String},size:{type:[String,Number],},min:{type:[String,Number]},max:{type:[String,Number]}},data(){let currentAutocomplete='off';if(this.autocomplete===true){currentAutocomplete='on';}
else if(this.autocomplete&&bbn.fn.isString(this.autocomplete)){currentAutocomplete=this.autocomplete;}
return{currentValue:this.value,currentAutocomplete:currentAutocomplete,currentSize:this.size||'',currentActionLeft:bbn.fn.isFunction(this.actionLeft)?this.actionLeft:()=>{},currentActionRight:bbn.fn.isFunction(this.actionRight)?this.actionRight:()=>{},currentPattern:null,currentType:null}},computed:{currentInputSize(){return this.autosize?(this.value?this.value.toString().length:1):0}},methods:{clear(){this.emitInput('');},init(){if(this.pattern){let types=['text','date','search','url','tel','email','password'];this.currentPattern=this.pattern;this.currentType=types.includes(this.type)?this.type:'text';}
else if(this.type==='hostname'){this.currentPattern=bbn.var.regexp.hostname.source;this.currentType='text';}
else if(this.type==='ip'){this.currentPattern=bbn.var.regexp.ip.source;this.currentType='text';}
else{this.currentPattern=this.pattern;this.currentType=this.type;}}},created(){this.init();},mounted(){if(this.required){this.getRef('element').setAttribute('required','');}
this.ready=true;},watch:{required(v){if(v){this.getRef('element').setAttribute('required','');}
else{this.getRef('element').removeAttribute('required');}},type(newVal){this.init()}}});})(bbn);})(bbn);