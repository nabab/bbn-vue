((bbn)=>{let script=document.createElement('script');script.innerHTML=`<div :class="[{'bbn-overlay': scrollable, 'bbn-block': !scrollable}, componentClass, 'bbn-bordered']">
  <div :class="{'bbn-overlay': scrollable, 'bbn-flex-height': scrollable, 'bbn-block': !scrollable}"
       :style="scrollable && groupCols.length ? {} : {
         width: totalWidth
       }"
       v-if="cols.length"
  >
    <div v-if="hasToolbar"
         class="bbn-table-toolbar bbn-w-100"
         ref="toolbar"
    >
      <bbn-toolbar v-if="toolbarButtons.length"
                   :source="toolbarButtons">
        <slot name="toolbar"></slot>
      </bbn-toolbar>
      <div v-else-if="typeof toolbar === 'function'"
           v-html="toolbar()"
      ></div>
      <component v-else
                 :is="toolbar"
      ></component>
    </div>
    <div :class="['bbn-w-100', 'bbn-table-container', {'bbn-flex-fill': scrollable}]">
      <div v-if="initStarted"
           class="bbn-overlay bbn-middle bbn-background"
           style="z-index: 5"
      >
        <bbn-loadicon class="bbn-vmiddle"
                      :size="24"/>
        <span class="bbn-xl bbn-b bbn-left-sspace"
              v-text="_('Loading') + '...'"/>
      </div>
      <component :is="scrollable ? 'bbn-scroll' : 'div'"
                 class="bbn-w-100"
                 ref="scroll"
                 :offset-y="$refs.thead ? [$refs.thead.getBoundingClientRect().height, 0] : [0,0]"
                 @resize="resizeWidth"
      >
        <table :style="{width: totalWidth}"
               ref="table"
               v-if="currentColumns.length"
               class="bbn-table-table">
          <colgroup>
            <template v-for="(groupCol, groupIndex) in groupCols">
              <col v-for="(col, i) in groupCol.cols"
                  v-show="!col.hidden"
                  :style="{width: col.realWidth + 'px'}"
                  :key="groupIndex + '-'+ i"
              >
            </template>
          </colgroup>
          <thead v-if="titles" ref="thead">
            <tr v-if="titleGroups">
              <template v-for="(groupCol, groupIndex) in groupCols">
                <th v-for="(col, i) in titleGroupsCells(groupIndex)"
                    :colspan="col.colspan"
                    :style="{
                      zIndex: (col.left !== undefined) || (col.right !== undefined) ? 4 : 3,
                      top: '0px',
                      left: col.left !== undefined ? (col.left + 'px') : '',
                      right: col.right !== undefined ? (col.right + 'px') : '',
                      width: col.width + 'px'
                    }"
                    :class="['bbn-table-fixed-cell', {
                      'bbn-table-fixed-cell-left': groupIndex === 0,
                      'bbn-table-fixed-cell-left-last': (groupIndex === 0) && !titleGroupsCells(groupIndex)[i+1],
                      'bbn-table-fixed-cell-right': groupIndex === 2,
                      'bbn-table-cell-first': (groupIndex === 1)
                        && titleGroupsCells(groupIndex).length
                        && (i === 0)
                    }]"
                    :title="col.text">
                  <component v-if="col.component"
                            :is="col.component"
                            :source="col"
                  ></component>
                  <div class="bbn-100 bbn-table-title-group" v-else>
                    <div :class="[col.cls, 'bbn-ellipsis']"
                        :style="col.style"
                        v-html="col.text"
                    ></div>
                  </div>
                </th>
              </template>
            </tr>
            <!-- Titles -->
            <tr>
              <template v-for="(groupCol, groupIndex) in groupCols">
                <th v-for="(col, i) in groupCol.cols"
                    v-show="!col.hidden"
                    :style="{
                      left: col.left !== undefined ? (col.left + 'px') : '',
                      right: col.right !== undefined ? (col.right + 'px') : '',
                      width: col.realWidth + 'px',
                      zIndex: (col.left !== undefined) || (col.right !== undefined) ? 4 : 3,
                      top: titleGroups ? '39px' : '0px'
                    }"
                    :class="['bbn-table-fixed-cell', {
                      'bbn-table-fixed-cell-left': groupIndex === 0,
                      'bbn-table-fixed-cell-left-last': (groupIndex === 0) && !groupCol.cols[i+1],
                      'bbn-table-fixed-cell-right': groupIndex === 2,
                      'bbn-table-cell-first': (groupIndex === 1)
                        && groupCols[0].cols.length
                        && (i === 0)
                    }]"
                    :title="col.ftitle || col.title || col.field || ' '"
                >
                  <i :class="{
                      nf: true,
                      'nf-fa-filter': true,
                      'bbn-p': true,
                      'bbn-red': hasFilter(col)
                    }"
                    v-if="showFilterOnColumn(col)"
                    @click="showFilter(col, $event)"
                  ></i>
                  <div v-if="col.isSelection" :title="_('Check all')">
                    <bbn-checkbox v-model="allRowsChecked"/>
                  </div>
                  <div v-else-if="col.isExpander" :title="_('Expand all')">
                    <!-- @todo an icon for expanding all/none -->
                  </div>
                  <component v-else-if="col.tcomponent"
                            :is="col.tcomponent"
                            :source="col"
                  ></component>
                  <span class="bbn-p"
                        v-else-if="sortable && (col.sortable !== false) && !col.buttons"
                        @click="sort(col)">
                    <span v-if="col.encoded"
                          v-text="col.title || col.field || ' '"
                          :title="col.ftitle || col.title || col.field"
                    ></span>
                    <span v-else
                          v-html="col.title || col.field || ' '"
                          :title="col.ftitle || col.title || col.field || ' '"
                    ></span>
                  </span>
                  <span v-else>
                    <span v-if="col.encoded"
                          v-text="col.title || col.field || ' '"
                          :title="col.ftitle || col.title || col.field || ' '"
                    ></span>
                    <span v-else
                          v-html="col.title || col.field || ' '"
                          :title="col.ftitle || col.title || col.field || ' '"
                    ></span>
                  </span>
                  <i v-if="isSorted(col)"
                    :class="{
                      'bbn-table-sortable-icon': true,
                      'nf nf-fa-caret_up': isSorted(col).dir === 'ASC',
                      'nf nf-fa-caret_down': isSorted(col).dir === 'DESC',
                  }"></i>
                </th>
              </template>
            </tr>
          </thead>
          <tbody ref="tbody"
                 :class="{
                   'bbn-overlay': ((!filteredData.length && !tmpRow) || isLoading) && !!scrollable
                 }">
            <tr v-if="(!filteredData.length && !tmpRow) || isLoading"
                :class="{
                  'bbn-overlay': !!scrollable,
                  'bbn-middle': !!scrollable
                }"
                :style="{
                  paddingTop: $refs.thead && !!scrollable ? $refs.thead.getBoundingClientRect().height + 'px' : 0,
                  maxWidth: !!scrollable ? lastKnownWidth + 'px' : '',
                  left: !!scrollable && getRef('scroll') ? getRef('scroll').currentX + 'px' : ''
                }">
              <td :colspan="currentColumns && !scrollable ? currentColumns.length : ''">
                <div class="bbn-spadded bbn-background bbn-c">
                  <div v-if="!isLoading"
                       v-html="noData || ' '"/>
                  <div v-else
                       class="bbn-vmiddle">
                    <bbn-loadicon class="bbn-vmiddle"
                                  :size="24"/>
                    <span class="bbn-xl bbn-b bbn-left-sspace"
                          v-text="_('Loading') + '...'"/>
                  </div>
                </div>
              </td>
            </tr>
            <template v-else v-for="(d, i) in items">
              <tr :key="d.rowKey"
                  :index="i"
                  :tabindex="0"
                  @focusout="focusout(i)"
                  @focusin="focusin(i, $event)"
                  @dblclick="() => {if (focusedRow !== i) {focusedRow = i}}"
                  :class="[{
                    'bbn-alt': d.expanderIndex !== undefined ? !!(d.expanderIndex % 2) : !!(d.rowIndex % 2),
                    'bbn-header': !!(d.aggregated || d.groupAggregated),
                  }, getTrClass(d.data)]"
                  :style="getTrStyle(d.data)"
                  ref="rows"
              >
                <!-- Group lines just have the cell with the expander and a single big cell -->
                <template v-if="groupable && d.group && currentColumns && currentColumns.length">
                  <td :class="[getTrClass(d.data), (currentColumns[0].fixed ? ' ' + cssRuleName + ' bbn-table-fixed-cell bbn-table-fixed-cell-left' : '')]"
                      :style="[{
                        left: currentColumns[0].left !== undefined ? currentColumns[0].left + 'px' : '',
                        width: currentColumns[0].realWidth
                      }, getTrStyle(d.data)]">
                    <div @click="toggleExpanded(d.index)"
                        class="bbn-table-expander bbn-p bbn-unselectable bbn-spadded bbn-c"
                        v-if="d.expander"
                        @keydown.space="toggleExpanded(d.index)"
                        tabindex="0"
                        >
                      <i :class="'nf nf-fa-caret_' + (isExpanded(d) ? 'down' : 'right') + ' bbn-lg'"
                      ></i>
                    </div>
                  </td>
                  <td :class="currentClass(cols[group], d.data, i) + (currentColumns[0].fixed ? ' ' + cssRuleName + ' bbn-table-fixed-cell bbn-table-cell-left' : '')"
                      :style="{
                        left: currentColumns[1].left !== undefined ? currentColumns[1].left + 'px' : 'auto',
                        width: 'auto',
                        borderRight: '0px',
                        overflow: 'unset'
                    }">
                    <div :class="[currentClass(cols[group], d.data, i), {'bbn-spadded': !cols[group].component}]"
                         :style="{
                            width: lastKnownWidth - groupCols[currentColumns[0].isLeft ? 0 : 1].cols[0].realWidth - borderLeft - borderRight + 'px',
                            backgroundColor: 'transparent !important'
                          }">
                      <!--span v-if="!isGroupedCell(groupIndex, d)"></span-->
                      <component v-if="cols[group].component"
                                :is="cols[group].component"
                                class="bbn-spadded"
                                :source="d.data"/>
                      <div v-else
                           v-html="render(d.data, cols[group], d.index) + (d.expanded ? '' : ' (' + d.num + ')')"/>
                    </div>
                  </td>
                  <td :colspan="currentColumns.length - 2"
                      style="border-left: 0px"
                      :class="getTrClass(d.data)"/>
                </template>
                <!--td v-else-if="d.expansion && !selection"
                    :class="col.fixed ? cssRuleName : ''"
                    :colspan="currentColumns.length">
                  &nbsp;
                </td-->
                <template v-else-if="d.expansion">
                  <td :class="[getTrClass(d.data), (currentColumns[0].fixed ? ' ' + cssRuleName + ' bbn-table-fixed-cell bbn-table-fixed-cell-left' : '')]"
                      :style="{
                        left: currentColumns[0].left !== undefined ? currentColumns[0].left + 'px' : '',
                        width: currentColumns[0].realWidth
                      }"/>
                  <td :class="[getTrClass(d.data), (currentColumns[0].fixed ? ' ' + cssRuleName + ' bbn-table-fixed-cell bbn-table-cell-left' : '')]"
                      :style="{
                        left: currentColumns[1].left !== undefined ? currentColumns[1].left + 'px' : 'auto',
                        width: 'auto',
                        borderRight: '0px',
                        overflow: 'unset'
                      }">
                    <div class="bbn-block"
                         :style="{
                            width: lastKnownWidth - groupCols[currentColumns[0].isLeft ? 0 : 1].cols[0].realWidth - borderLeft - borderRight + 'px',
                            backgroundColor: 'transparent !important'
                          }">
                      <component v-if="typeof(expander) !== 'function'"
                                :is="expander"
                                class="bbn-spadded"
                                :source="d.data"/>
                      <component v-else-if="(typeof(expander(d)) === 'object')"
                                :is="expander(d)"
                                :source="d.data"/>
                      <div v-else
                           v-html="expander(d.data, i)"/>
                    </div>
                  </td>
                  <td :colspan="currentColumns.length - 2"
                      :style="[getTrStyle(d.data), {borderLeft: 0}]"
                      :class="getTrClass(d.data)"/>
                </template>
                <td v-else-if="d.full"
                    :colspan="currentColumns.length"
                >
                  <component v-if="d.component"
                            :is="d.component"
                            v-bind="d.options || {}"
                            :source="col.mapper ? col.mapper(d.data) : d.data"
                  ></component>
                  <div v-else v-html="render(d.data, col, i)"></div>
                </td>

                <td v-else
                    v-for="(col, index) in currentColumns"
                    :class="[currentClass(col, d.data, i), cssRuleName, {
                      'bbn-table-fixed-cell': !!col.fixed,
                      'bbn-table-fixed-cell-left': col.isLeft,
                      'bbn-table-fixed-cell-left-last': col.isLeft
                        && (!currentColumns[index+1] || !currentColumns[index+1].isLeft),
                      'bbn-table-fixed-cell-right': col.isRight,
                      'bbn-table-cell-first': !col.isLeft && !col.isRight && ((index === 0) || (!!currentColumns[index-1].isLeft)),
                      'bbn-table-edit-buttons': !!col.buttons && isEdited(d.data, col, i),
                      'bbn-table-buttons': !!col.buttons
                    }]"
                    @click="clickCell(col, index, d.index)"
                    :style="{
                      left: col.left !== undefined ? (col.left + 'px') : 'auto',
                      right: col.right !== undefined ? (col.right + 'px') : 'auto',
                      width: col.realWidth
                    }">
                  <div class="bbn-block bbn-spadded">
                    <!-- Checkboxes -->
                    <div v-if="col.isSelection" class="bbn-c bbn-w-100">
                      <bbn-checkbox v-if="d.selection"
                                    :checked="d.selected"
                                    :value="true"
                                    :novalue="false"
                                    :strict="true"
                                    @click.stop
                                    @change="checkSelection(i)"
                                    class="bbn-middle bbn-flex"
                      ></bbn-checkbox>
                    </div>
                    <!-- Aggregate -->
                    <template v-else-if="d.aggregated || d.groupAggregated">
                      <span v-if="col.isAggregatedTitle"
                            :class="d.aggregated ? 'bbn-b' : ''"
                            v-text="aggregateExp[d.name]"
                      ></span>
                      <div v-else-if="col.aggregate"
                          v-html="render(d.data, col, i)"></div>
                      <span v-else></span>
                      <!-- The row is an aggregate and there are no other cells -->
                    </template>
                        <!-- Expander -->
                    <div v-else-if="col.isExpander"
                        @click="toggleExpanded(d.index)"
                        class="bbn-table-expander bbn-lg bbn-p bbn-unselectable bbn-c">
                      <i :class="'nf nf-fa-caret_' + (isExpanded(d) ? 'down' : 'right') + ' bbn-unselectable'"
                        v-if="d.expander"
                        tabindex="0"
                      ></i>
                      <span v-else>&nbsp;</span>
                    </div>
                    <template v-else>
                      <span class="bbn-table-dirty bbn-top-left"
                            v-if="isDirty(d, col, i)"></span>
                      <div v-if="isEdited(d.data, col, i)">
                        <div v-if="(editMode === 'inline') && (editable !== 'nobuttons') && (col.index === colButtons)">
                          <bbn-button :text="_('Save')"
                                      :disabled="!isEditedValid"
                                      icon="nf nf-fa-save"
                                      :notext="true"
                                      @focusin.stop=""
                                      @click.prevent.stop="saveInline"
                                      style="margin: 0 .1em"
                          ></bbn-button>
                          <bbn-button :text="_('Cancel')"
                                      icon="nf nf-fa-times"
                                      :notext="true"
                                      @focusin.stop=""
                                      @click.prevent.stop="cancel"
                                      style="margin: 0 .1em"
                          ></bbn-button>
                        </div>
                        <component v-else-if="(editMode === 'inline') && col.field && (col.editable !== false)"
                                  v-bind="getEditableOptions(col, d.data)"
                                  :is="getEditableComponent(col, d.data)"
                                  @click.stop=""
                                  v-model="editedRow[col.field]"
                                  style="width: 100%"
                        ></component>
                        <bbn-field v-else-if="col.field && !col.render && !col.buttons"
                                  v-bind="col"
                                  @click.stop=""
                                  :key="d.rowKey"
                                  :value="d.data[col.field]"
                                  :data="d.data">
                        </bbn-field>
                        <div v-else-if="!col.buttons && col.render"
                            v-html="col.render(d.data, col, i)"></div>
                        <div v-else-if="!col.buttons" v-html="render(d.data, col, i)"></div>
                        <div v-else> </div>
                      </div>
                      <component v-else-if="col.component"
                                :is="col.component"
                                v-bind="col.options"
                                :source="col.mapper ? col.mapper(d.data) : d.data"
                      ></component>
                      <template v-else-if="col.buttons && dropdownMode">
                        <bbn-dropdown :source="col.buttons"
                                      :placeholder="dropdownMode === true ? _('Action') : dropdownMode"
                                      :popup="true"
                                      @select="_execCommand(button, d.data, col, i, $event)"/>
                      </template>
                      <template v-else-if="col.buttons && (colButtons === index)">
                        <bbn-button v-for="(button, bi) in (Array.isArray(realButtons) ? realButtons : realButtons(d.data, col, i))"
                                    :key="bi"
                                    v-bind="button"
                                    @focusin.prevent.stop="() => {}"
                                    @focusout.prevent.stop="() => {}"
                                    @click.prevent.stop="_execCommand(button, d.data, col, i, $event)"
                                    style="margin: 0 .1em"
                        ></bbn-button>
                      </template>
                      <template v-else-if="col.buttons">
                        <bbn-button v-for="(button, bi) in (Array.isArray(col.buttons) ? col.buttons : col.buttons(d.data, col, i))"
                                    :key="bi"
                                    v-bind="button"
                                    @focusin.prevent.stop="() => {}"
                                    @focusout.prevent.stop="() => {}"
                                    @click.prevent.stop="_execCommand(button, d.data, col, i, $event)"
                                    style="margin: 0 .1em"
                        ></bbn-button>
                      </template>
                      <div v-else v-html="render(d.data, col, i)"></div>
                    </template>
                  </div>
                </td>
              </tr>
            </template>
          </tbody>
        </table>
      </component>
    </div>
    <!-- Footer -->
    <bbn-pager class="bbn-table-footer bbn-no-border-right bbn-no-border-left bbn-no-border-bottom"
               v-if="(pageable || saveable || filterable || isAjax || showable) && (footer !== false)"
               :element="_self"
               :buttons="footerButtons"
    ></bbn-pager>
  </div>
  <bbn-floater v-if="currentFilter"
               class="bbn-table-floating-filter bbn-widget"
               :element="filterElement"
               @close="currentFilter = false"
               :auto-hide="true"
               :scrollable="true"
               :left="floatingFilterX"
               :top="floatingFilterY">
    <bbn-filter v-bind="getFilterOptions()"
                @set="onSetFilter"
                @unset="unsetCurrentFilter"
                class="bbn-w-100"
    ></bbn-filter>
    <div v-if="multifilter"
         class="bbn-table-filter-link bbn-p bbn-b bbn-i bbn-w-100 bbn-bottom-padded bbn-left-padded bbn-right-padded bbn-r"
         @click="openMultiFilter">
      <i class="zmdi zmdi-filter-list"></i>
      <span v-text="_('Open the full filter')"></span>
    </div>
  </bbn-floater>
  <bbn-popup ref="popup" v-if="inTable === false"></bbn-popup>
  <bbn-floater v-if="focusedElement && (editMode === 'inline') && editedRow"
               class="bbn-widget"
               :element="focusedElement"
               :scrollable="true"
               tabindex="-1"
               :left="focusedElementX"
               :top="focusedElementY">
        <bbn-button :text="_('Save')"
                    :disabled="!isEditedValid"
                    icon="nf nf-fa-save"
                    :notext="true"
                    @click.prevent.stop="saveInline"
                    style="margin: 0 .1em"
                    tabindex="-1"
        ></bbn-button>
        <bbn-button :text="_('Cancel')"
                    icon="nf nf-fa-times"
                    :notext="true"
                    @click.prevent.stop="cancel"
                    style="margin: 0 .1em"
                    tabindex="-1"
        ></bbn-button>
  </bbn-floater>
</div>
`;script.setAttribute('id','bbn-tpl-component-table');script.setAttribute('type','text/x-template');document.body.insertAdjacentElement('beforeend',script);(function(bbn,Vue){"use strict";Vue.component('bbn-table',{mixins:[bbn.vue.basicComponent,bbn.vue.resizerComponent,bbn.vue.editableListComponent,bbn.vue.listComponent,bbn.vue.dataEditorComponent,bbn.vue.localStorageComponent,bbn.vue.observerComponent,bbn.vue.keepCoolComponent,bbn.vue.dataComponent],props:{titles:{type:Boolean,default:true},noData:{default:'<h3>'+bbn._('No Data')+'</h3>'},titleGroups:{type:[Array,Function]},scrollable:{type:Boolean,default:true},resizable:{type:Boolean,default:false},showable:{type:Boolean,default:false},saveable:{type:Boolean,default:false},groupable:{type:Boolean,default:false},serverGrouping:{type:Boolean,default:true},localGrouping:{type:Boolean,default:true},minimumColumnWidth:{type:Number,default:30},minimumColumnWidthMobile:{type:Number,default:100},defaultColumnWidth:{type:Number,default:150},paginationType:{type:String,default:'input'},info:{type:Boolean,default:false},search:{type:Boolean,default:false},trClass:{type:[String,Function,Object]},trStyle:{type:[String,Function,Object]},confirmMessage:{type:[String,Function,Boolean],default:bbn._('Are you sure you want to delete this row?')},expander:{},loader:{type:Boolean,default:false},fixedDefaultSide:{type:String,default:"left"},toolbar:{},columns:{type:Array,default:function(){return[];}},groupBy:{type:Number},dropdownMode:{type:[Boolean,String],default:false},expandedValues:{type:[Array,Function]},expanded:{type:[Boolean,Array],default(){return[];}},footer:{type:[String,Object]},groupFooter:{type:[String,Object]},aggregateExp:{type:Object,default(){return{tot:bbn._('Total'),med:bbn._('Average'),num:bbn._('Count'),max:bbn._('Maximum'),min:bbn._('Minimum'),};}},aggregate:{type:[String,Array]},loadedConfig:{type:Object},footerButtons:{type:Boolean,default(){return!bbn.fn.isMobile()||bbn.fn.isTabletDevice();}},},data(){return{_observerReceived:false,allRowsChecked:false,groupCols:[{name:'left',width:0,visible:0,cols:[]},{name:'main',width:0,visible:0,cols:[]},{name:'right',width:0,visible:0,cols:[]}],initReady:false,currentConfig:{},savedConfig:false,defaultConfig:bbn.fn.extend({filters:this.filters,limit:this.limit,order:this.order,hidden:this.hidden||null,},this.loadedConfig||{}),editedFilter:false,floatingFilterX:0,floatingFilterY:0,floatingFilterTimeOut:0,currentHidden:this.hidden||[],group:this.groupBy===undefined?false:this.groupBy,cols:[],table:false,colButtons:false,scrollableContainer:null,hiddenScroll:true,popups:[],isAggregated:false,aggregatedColumns:[],updaterTimeout:false,allExpanded:this.expanded===true?true:false,groupInit:false,currentExpanded:Array.isArray(this.expanded)?this.expanded:[],currentExpandedValues:Array.isArray(this.expandedValues)?this.expandedValues:[],focusedRow:false,rowIndexTimeOut:null,containerPadding:(bbn.fn.getScrollBarSize()?bbn.fn.getScrollBarSize():'0')+'px',container:null,currentScrollTop:0,marginStyleSheet:null,cssRuleName:bbn.fn.randomString().toLowerCase(),initStarted:false,inTable:null,filterElement:null,hasScrollX:false,hasScrollY:false,borderLeft:0,borderRight:0,focusedElement:undefined,focusedElementX:0,focusedElementY:0,isTableDataUpdating:false};},computed:{realButtons(){if(this.cols.length&&this.cols[this.colButtons]&&this.cols[this.colButtons].buttons){if(bbn.fn.isFunction(this.cols[this.colButtons].buttons)){return this.cols[this.colButtons].buttons;}
else if(bbn.fn.isArray(this.cols[this.colButtons].buttons)){let res=[];bbn.fn.each(this.cols[this.colButtons].buttons,a=>{if(bbn.fn.isString(a)){switch(a){case'edit':res.push({text:bbn._('Edit'),action:'edit',icon:'nf nf-fa-edit'})
break;case'copy':res.push({text:bbn._("Copy"),action:'copy',icon:'nf nf-fa-copy'});break;case'delete':res.push({text:bbn._("Delete"),action:'delete',icon:'nf nf-fa-times'});break;}}
else{res.push(a)}})
return res;}}
return[];},selectedValues(){return this.currentSelected.map((a)=>{return this.uid?this.currentData[a].data[this.uid]:this.currentData[a].data;})},containerWidth(){if(!this.groupCols||!this.groupCols[1]||!this.groupCols[1].width||!this.lastKnownCtWidth){return'0px';}
return(this.lastKnownCtWidth-this.groupCols[0].width-this.groupCols[2].width)+'px';},totalWidth(){if(!this.groupCols||!this.groupCols[1]||!this.groupCols[1].width||!this.lastKnownCtWidth){return'0px';}
return(this.groupCols[0].width+this.groupCols[1].width+this.groupCols[2].width)+'px';},hasToolbar(){return this.toolbarButtons.length||bbn.fn.isObject(this.toolbar)||bbn.fn.isFunction(this.toolbar)||bbn.fn.isString(this.toolbar);},shownFields(){let r=[];bbn.fn.each(this.cols,(a)=>{if(a.field&&!a.hidden){r.push(a.field);}});return r;},jsonConfig(){return JSON.stringify(this.currentConfig);},isSaved(){return this.jsonConfig===this.savedConfig;},isChanged(){return JSON.stringify(this.currentConfig)!==this.initialConfig;},toolbarButtons(){let r=[],ar=[];if(this.toolbar){ar=bbn.fn.isFunction(this.toolbar)?this.toolbar():(Array.isArray(this.toolbar)?this.toolbar.slice():[]);if(!Array.isArray(ar)){ar=[];}
bbn.fn.each(ar,(a)=>{let o=bbn.fn.clone(a);if(o.action){o.action=()=>{this._execCommand(a);}}
r.push(o);});}
return r;},isEditedValid(){let ok=true;if(this.tmpRow){bbn.fn.each(this.columns,(a)=>{if(a.field&&a.required&&!this.tmpRow[a.field]){ok=false;return false;}});}
return ok;},numVisible(){return this.cols.length-bbn.fn.count(this.cols,{hidden:true})+(this.hasExpander?1:0)+(this.selection?1:0);},scroller(){return this.$refs.scroller instanceof Vue?this.$refs.scroller:null;},items(){if(!this.cols.length){return[];}
let res=[],isGroup=this.groupable&&(this.group!==false)&&this.cols[this.group]&&this.cols[this.group].field,groupField=isGroup?this.cols[this.group].field:false,currentGroupValue,currentLink,o,rowIndex=0,end=this.pageable?this.currentLimit:this.currentData.length,aggregates={},aggregateModes=[],aggIndex=0,i=0,data=this.filteredData;if(this.isAggregated){aggregateModes=bbn.fn.isArray(this.aggregate)?this.aggregate:[this.aggregate];bbn.fn.each(this.aggregatedColumns,(a)=>{aggregates[a.field]={tot:0,num:0,min:false,max:false,groups:[]};});}
if(this.pageable&&(!this.isAjax||!this.serverPaging)){i=this.start;end=this.start+this.currentLimit>data.length?data.length:this.start+this.currentLimit;}
let pos;if(isGroup&&((this.isAjax&&this.serverGrouping)||(!this.isAjax&&this.localGrouping))&&((pos=bbn.fn.search(this.currentOrder,{field:this.cols[this.group].field}))!==0)){let orders=[{field:this.cols[this.group].field,dir:(pos>0?this.currentOrder[pos].dir:'asc')}];if(this.sortable&&this.currentOrder.length){orders=orders.concat(JSON.parse(JSON.stringify(this.currentOrder)))}
data=bbn.fn.multiorder(data,orders.map((item)=>{item.field='data.'+item.field;return item;}));}
else if(this.sortable&&this.currentOrder.length&&(!this.serverSorting||!this.isAjax)){if(bbn.fn.count(this.cols,{source:undefined},'!==')){let tmpData={};bbn.fn.each(this.cols,function(col){if(col.source&&col.field){tmpData[col.field]={};bbn.fn.each(data,function(d){tmpData[col.field][d.index]=d.data[col.field];d.data[col.field]=d.data[col.field]?bbn.fn.getField(col.source,col.sourceText?col.sourceText:'text',col.sourceValue?col.sourceValue:'value',d.data[col.field])||'':'';})}});data=bbn.fn.multiorder(data,JSON.parse(JSON.stringify(this.currentOrder)).map((item)=>{item.field='data.'+item.field;return item;}));bbn.fn.each(this.cols,(col)=>{if(col.source&&col.field){bbn.fn.each(data,(d,i)=>{d.data[col.field]=tmpData[col.field][d.index];});}});}else{data=bbn.fn.multiorder(data,JSON.parse(JSON.stringify(this.currentOrder)).map((item)=>{item.field='data.'+item.field;return item;}));}}
if(this.tmpRow){res.push({index:-1,rowIndex:0,rowKey:this.isAjax?('-1-'+this.hashCfg):-1,data:this.tmpRow,selected:false,expander:false});this.editedIndex=-1;rowIndex++;}
let currentGroupIndex=-1,currentGroupRow=-1,isExpanded=false,groupNumCheckboxes=0,groupNumChecked=0,lastInGroup=false,expanderIndex=0;while(data[i]&&(i<end)){let a=data[i].data;lastInGroup=isGroup&&(!data[i+1]||(data[i+1].data[groupField]!==currentGroupValue));if(isGroup&&(currentGroupValue!==a[groupField])){groupNumCheckboxes=0;if((a[groupField]===undefined)||bbn.fn.isNull(a[groupField])||(a[groupField]==='')){currentGroupValue=null;currentGroupIndex=-1;isExpanded=true;}
else{isExpanded=false;currentGroupValue=a[groupField];currentGroupIndex=data.index;currentGroupRow=res.length;let tmp={group:true,index:data[i].index,value:currentGroupValue,data:a,rowIndex:rowIndex,rowKey:data[i].key,expander:true,num:bbn.fn.count(data,'data.'+this.cols[this.group].field,currentGroupValue)};if(this.allExpanded){isExpanded=true;if(this.currentExpandedValues.indexOf(currentGroupValue)===-1){this.currentExpandedValues.push(currentGroupValue);}}
else if(bbn.fn.isFunction(this.expandedValues)){if(this.expandedValues(currentGroupValue)&&(this.currentExpandedValues.indexOf(currentGroupValue)===-1)){isExpanded=true;}}
else if(this.currentExpandedValues.indexOf(currentGroupValue)>-1){isExpanded=true;}
currentLink=res.length;if(!isExpanded&&data[i-1]&&(currentGroupValue===data[i-1].data[groupField])){if(res.length){res.push(tmp);}}else{tmp.expanded=isExpanded;res.push(tmp);rowIndex++;}}}
else if(this.expander){let exp=bbn.fn.isFunction(this.expander)?this.expander(data[i],i):this.expander;isExpanded=exp?this.currentExpanded.indexOf(data[i].index)>-1:false;}
if(!isGroup||isExpanded||!currentGroupValue){o={index:data[i].index,data:a,rowIndex:rowIndex,rowKey:data[i].key};if(isGroup){if(!currentGroupValue){o.expanded=true;}else{o.isGrouped=true;o.link=currentLink;o.rowKey=o.rowIndex+'-'+o.rowKey;}}else if(this.expander&&(!bbn.fn.isFunction(this.expander)||(bbn.fn.isFunction(this.expander)&&this.expander(data[i],i)))){o.expander=true;expanderIndex=o.index;o.expanderIndex=expanderIndex;}
if(this.selection&&(!bbn.fn.isFunction(this.selection)||this.selection(o))){o.selected=(!this.uid&&this.currentSelected.includes(data[i].index))||(this.uid&&this.currentSelected.includes(data[i].data[this.uid]));o.selection=true;groupNumCheckboxes++;if(o.selected){groupNumChecked++;}}
res.push(o);rowIndex++;}else{end++;}
if(this.expander&&(!bbn.fn.isFunction(this.expander)||(bbn.fn.isFunction(this.expander)&&this.expander(data[i],i)))){res.push({index:data[i].index,data:a,expansion:true,rowIndex:rowIndex,rowKey:rowIndex+'-'+data[i].key,expanderIndex:expanderIndex});rowIndex++;}
if(aggregateModes.length){bbn.fn.each(this.aggregatedColumns,(ac)=>{let aggr=aggregates[ac.field];aggr.num++;aggr.tot+=parseFloat(a[ac.field]);if(aggr.min===false){aggr.min=parseFloat(a[ac.field]);}else if(aggr.min>parseFloat(a[ac.field])){aggr.min=parseFloat(a[ac.field])}
if(aggr.max===false){aggr.max=parseFloat(a[ac.field]);}else if(aggr.max<parseFloat(a[ac.field])){aggr.max=parseFloat(a[ac.field])}
if(isGroup&&currentGroupValue){let searchRes=bbn.fn.search(aggr.groups,{value:currentGroupValue});if(searchRes===-1){searchRes=aggr.groups.length;aggr.groups.push({value:currentGroupValue,tot:0,num:0,min:false,max:false,});}
let b=aggr.groups[searchRes];b.num++;b.tot+=parseFloat(a[ac.field]);if(b.min===false){b.min=parseFloat(a[ac.field]);}else if(b.min>parseFloat(a[ac.field])){b.min=parseFloat(a[ac.field])}
if(b.max===false){b.max=parseFloat(a[ac.field]);}else if(b.max<parseFloat(a[ac.field])){b.max=parseFloat(a[ac.field])}
if(isExpanded&&((!data[i+1]||(i===(end-1)))||(currentGroupValue!==data[i+1].data[this.cols[this.group].field]))){let b=aggr.groups[aggr.groups.length-1];b.med=b.tot / b.num;bbn.fn.each(aggregateModes,c=>{let tmp={};tmp[ac.field]=b[c];res.push({index:data[i]?data[i].index:0,rowIndex:rowIndex,rowKey:'a'+aggIndex+'-'+(data[i]?data[i].key:rowIndex),groupAggregated:true,link:currentLink,value:currentGroupValue,name:c,data:tmp});rowIndex++;aggIndex++;});}}
if(!data[i+1]||(i===(end-1))){aggr.med=aggr.tot / aggr.num;bbn.fn.each(aggregateModes,c=>{let tmp={};tmp[ac.field]=aggr[c];res.push({index:data[i]?data[i].index:0,rowIndex:rowIndex,rowKey:'a'+aggIndex+'-'+(data[i]?data[i].key:rowIndex),aggregated:true,name:c,data:tmp});rowIndex++;aggIndex++;});}});}
if(isGroup&&this.selection&&lastInGroup&&groupNumCheckboxes){res[currentGroupRow].selection=true;res[currentGroupRow].selected=groupNumChecked===groupNumCheckboxes;}
i++;}
let fdata=[];res.forEach((d)=>{if(d.group||d.expander||this.isExpanded(d)||d.aggregated||(this.isExpanded(d)&&d.groupAggregated)||(!d.expander&&!d.expansion&&!this.isExpanded(d)&&bbn.fn.isFunction(this.expander)&&!this.expander(d))){fdata.push(d)}});return fdata;},hasExpander(){return this.expander||(this.groupable&&(typeof this.group==='number')&&this.cols[this.group]);},currentColumns(){let r=[];bbn.fn.each(this.groupCols,(a,i)=>{bbn.fn.each(a.cols,(b)=>{r.push(bbn.fn.extend(true,{},b,{fixed:i!==1,isLeft:i===0,isRight:i===2,realWidth:b.realWidth?b.realWidth+'px':'auto'}));});});return r;},expanderColumnVisible(){if(this.items&&this.items.length){return!!this.items.filter(i=>!!i.expander).length}
return false}},methods:{getTrClass(row){if(bbn.fn.isFunction(this.trClass)){return this.trClass(row);}
if(this.trClass){return this.trClass;}
return'';},getTrStyle(row){if(bbn.fn.isFunction(this.trStyle)){return this.trStyle(row);}
if(this.trStyle){return this.trStyle;}
return'';},_defaultRow(initialData){let res={},data=initialData?bbn.fn.clone(initialData):{};bbn.fn.each(this.cols,function(a){if(a.field){if(data[a.field]!==undefined){res[a.field]=data[a.field];}
else if(a.default!==undefined){res[a.field]=bbn.fn.isFunction(a.default)?a.default():a.default;}
else{res[a.field]='';}
if(bbn.fn.isArray(res[a.field])){res[a.field]=res[a.field].slice();}
else if(res[a.field]instanceof(Date)){res[a.field]=new Date(res[a.field].getTime());}
else if((null!==res[a.field])&&(typeof res[a.field]==='object')){res[a.field]=bbn.fn.clone(res[a.field]);}}});return res;},_export(){let span=window.document.createElement('span');let cols={};let res=[];bbn.fn.each(this.currentData,(a)=>{let o=bbn.fn.clone(a.data);let row=[];bbn.fn.each(this.cols,(b)=>{if(!b.hidden&&!b.buttons&&b.field){if(typeof o[b.field]==='string'){span.innerHTML=o[b.field];row.push(span.textContent.trim());}else{row.push(o[b.field]);}}});res.push(row);});return res;},_execCommand(button,data,col,index,ev){if(ev){ev.preventDefault();ev.stopImmediatePropagation();}
if(button.action){if(bbn.fn.isFunction(button.action)){return button.action(data,col,index);}
else if(typeof(button.action)==='string'){switch(button.action){case'csv':return this.exportCSV();case'excel':return this.exportExcel();case'insert':return this.insert(data,{title:bbn._('New row creation')},-1);case'select':return this.select(index);case'edit':return this.edit(data,{title:bbn._('Row edition')},index)
case'add':return this.add(data);case'copy':return this.copy(data,{title:bbn._('Row copy')},index);case'delete':return this.delete(index);}}}
return false;},exportCSV(filename,valSep,rowSep,valEsc){let data=bbn.fn.toCSV(this._export(),valSep,rowSep,valEsc);if(!filename){filename='export-'+bbn.fn.dateSQL().replace('/:/g','-')+'.csv';}
bbn.fn.downloadContent(filename,data,'csv');},exportExcel(){if(this.isAjax&&!this.isLoading){if(this.pageable){this.getPopup().open({title:bbn._('Warning'),content:'<div class="bbn-padded bbn-c">'+bbn._('What do you want to export?')+'</div>',buttons:[{text:bbn._('Cancel'),action:()=>{this.getPopup().close();}},{text:bbn._('This view'),action:()=>{bbn.fn.postOut(this.source,this.getExcelPostData(true));this.getPopup().close();}},{text:bbn._('All'),action:()=>{bbn.fn.postOut(this.source,this.getExcelPostData());this.getPopup().close();}}],width:300});}
else{this.confirm(bbn._('Are you sure you want to export to Excel?'),()=>{bbn.fn.postOut(this.source,this.getExcelPostData());});}}},getExcelPostData(currentView){let cols=bbn.fn.filter(bbn.fn.extend(true,[],this.cols),c=>{return(this.shownFields.includes(c.field)&&((c.export===undefined)||!c.export.excluded))||(c.export&&!c.export.excluded);}),data={excel:{fields:bbn.fn.map(cols,c=>{return{field:c.field,title:c.export&&c.export.title?c.export.title:(c.title||''),type:c.export&&c.export.type?c.export.type:(c.type||'string'),hidden:(c.export&&(c.export.hidden!==undefined))?+c.export.hidden:(!this.shownFields.includes(c.field)?1:0),format:c.export&&c.export.format?c.export.format:null}})},fields:bbn.fn.map(cols.slice(),f=>{return f.field}),limit:currentView?this.currentLimit:50000,start:currentView?this.start:0,data:this.getPostData()};if(this.sortable){data.order=this.currentOrder;}
if(this.isFilterable){data.filters=this.currentFilters;}
return data;},showQuery(){if(this.currentQuery){this.getPopup().open({title:bbn._('Database query and parameters'),scrollable:true,component:{template:`
<div class="bbn-block bbn-spadded">
  <h3 @click="showValues = !showValues"
      v-text="showValues ? _('Hide the values') : _('Show the values')"
      class="bbn-p"></h3>
  <ol class="bbn-space-bottom" v-if="showValues">
    <li v-for="v in source.values" v-text="v"></li>
  </ol>
  <pre v-text="source.query"></pre>
</div>
              `,props:['source'],data(){return{showValues:false}}},closable:true,source:{query:this.currentQuery,values:this.currentQueryValues}})}},isEditable(row,col,index){if(!this.editable){return false;}
if(bbn.fn.isFunction(col.editable)){return col.editable(row,col,index)}
return col.editable!==false},isEdited(data,col,idx){return this.isEditable(data,col,idx)&&(this.editMode==='inline')&&(this.items[idx].index===this.editedIndex);},titleGroupsCells(groupIndex){if(this.titleGroups){let cells=[],group=null,corresp={};bbn.fn.each(this.groupCols[groupIndex].cols,(a)=>{if(!a.hidden){if(a.group===group){cells[cells.length-1].colspan++;cells[cells.length-1].width+=a.realWidth;if(a.left!==undefined){if((cells[cells.length-1].left===undefined)||(a.left<cells[cells.length-1].left)){cells[cells.length-1].left=a.left;}}
if(a.right!==undefined){if((cells[cells.length-1].right===undefined)||(a.right<cells[cells.length-1].right)){cells[cells.length-1].right=a.right;}}}
else{if(corresp[a.group]===undefined){let idx=bbn.fn.search(this.titleGroups,'value',a.group);if(idx>-1){corresp[a.group]=idx;}}
if(corresp[a.group]!==undefined){cells.push({text:this.titleGroups[corresp[a.group]].text||'&nbsp;',style:this.titleGroups[corresp[a.group]].style||{},cls:this.titleGroups[corresp[a.group]].cls||'',colspan:1,width:a.realWidth,left:a.left!==undefined?a.left:undefined,right:a.right!==undefined?a.right:undefined});}
else{cells.push({text:'&nbsp;',style:'',cls:'',colspan:1,width:a.realWidth,left:a.left!==undefined?a.left:undefined,right:a.right!==undefined?a.right:undefined});}
group=a.group;}}});return cells;}},hasFilter(col){if(col.field){for(let i=0;i<this.currentFilters.conditions.length;i++){if(this.currentFilters.conditions[i].field===col.field){return true;}}}
return false;},moveMouse(e){this.keepCool(()=>{this.checkFilterWindow(e);},'moveMouse')},checkFilterWindow(e){if(this.currentFilter){if(this.floatingFilterTimeOut){clearTimeout(this.floatingFilterTimeOut);}
if((e.clientX<this.floatingFilterX)||(e.clientX>this.floatingFilterX+600)||(e.clientY<this.floatingFilterY)||(e.clientY>this.floatingFilterY+200)){if(!this.floatingFilterTimeOut){this.floatingFilterTimeOut=setTimeout(()=>{this.currentFilter=false;this.editedFilter=false;},500);}}else{this.floatingFilterTimeOut=0;}}},getPopup(){return this.popup||bbn.vue.getPopup(this);},getFilterOptions(){if(this.currentFilter){let o=this.editorGetComponentOptions(this.currentFilter);if(o.field){o.conditions=this.getColFilters(this.currentFilter);}
if(o.conditions.length){o.value=o.conditions[0].value;o.operator=o.conditions[0].operator;this.editedFilter=o.conditions[0];}
o.multi=false;return o;}},openMultiFilter(){this.currentFilter=false;let table=this;this.getPopup().open({title:bbn._('Multiple filters'),component:{template:`<bbn-scroll><bbn-filter v-bind="source" @change="changeConditions" :multi="true"></bbn-filter></bbn-scroll>`,props:['source'],methods:{changeConditions(o){table.currentFilters.logic=o.logic;table.currentFilters.conditions=o.conditions;}},},width:'90%',height:'90%',source:{fields:bbn.fn.filter(this.cols,(a)=>{return(a.filterable!==false)&&!a.buttons;}),conditions:this.currentFilters.conditions,logic:this.currentFilters.logic}});},getColFilters(col){let r=[];if(col.field){bbn.fn.each(this.currentFilters.conditions,(a)=>{if(a.field===col.field){r.push(a);}})}
return r;},showFilter(col,ev){this.filterElement=ev.target
this.floatingFilterX=(ev.pageX-10)<0?0:((ev.pageX-10+600)>this.$el.clientWidth?this.$el.clientWidth-600:ev.pageX-10);this.floatingFilterY=(ev.pageY-10)<0?0:((ev.pageY-10+200)>this.$el.clientHeight?this.$el.clientHeight-200:ev.pageY-10);this.currentFilter=col;},pickableColumnList(){return this.cols.slice().map((a)=>{return a.showable!==false;});},openColumnsPicker(){let table=this;this.getPopup().open({title:bbn._("Columns' picker"),height:'90%',width:'90%',component:{template:`
<div class="bbn-table-column-picker">
  <bbn-form ref="scroll"
            :source="formData"
            :scrollable="true"
            :prefilled="true"
            @success="applyColumnsShown">
    <div class="bbn-padded">
      <ul v-if="source.titleGroups">
        <li v-for="(tg, idx) in source.titleGroups">
          <h3>
            <bbn-checkbox :checked="allVisible(tg.value)"
                          @change="checkAll(tg.value)"
                          :label="tg.text"
            ></bbn-checkbox>
          </h3>
          <ul>
            <li v-for="(col, i) in source.cols"
                v-if="!col.fixed && (col.group === tg.value) && (col.showable !== false) && (col.title || col.ftitle)"
            >
              <bbn-checkbox :checked="shownCols[i]"
                            @change="check(col, i)"
                            :label="col.ftitle || col.title"
                            :contrary="true"
              ></bbn-checkbox>
            </li>
          </ul>
        </li>
      </ul>
      <ul v-else>
        <li v-for="(col, i) in source.cols"
            v-if="!col.fixed && (col.showable !== false) && (col.title || col.ftitle)"
        >
          <bbn-checkbox :checked="shownCols[i]"
                        @change="check(col, i)"
                        :label="col.ftitle || col.title"
                        :contrary="true"
          ></bbn-checkbox>
        </li>
      </ul>
    </div>
  </bbn-form>
</div>
`,props:['source'],data(){let shownColumns=this.source.cols.map(a=>!a.hidden);return{table:table,formData:{changed:false},shownCols:shownColumns}},methods:{applyColumnsShown(){let toShow=[],toHide=[];bbn.fn.each(this.source.cols,(a,i)=>{if(a.hidden==this.shownCols[i]){if(this.shownCols[i]){toShow.push(i);}else{toHide.push(i);}}});if(toShow.length){table.show(toShow);}
if(toHide.length){table.show(toHide,true);}},allVisible(group){let ok=true;bbn.fn.each(this.source.cols,(a,i)=>{if((a.showable!==false)&&(a.group===group)&&!a.fixed){if(!this.shownCols[i]){ok=false;return false;}}});return ok;},check(col,index){this.$set(this.shownCols,index,!this.shownCols[index]);},checkAll(group){let show=!this.allVisible(group),shown=[];bbn.fn.each(this.source.cols,(a,i)=>{if((a.showable!==false)&&(a.group===group)&&!a.fixed){if(this.shownCols[i]!=show){this.shownCols.splice(i,1,show);}}});this.$forceUpdate();}},watch:{shownCols:{deep:true,handler(){this.formData.changed=true;}}}},source:{cols:this.cols,titleGroups:this.titleGroups}});},isGroupedCell(groupIndex,row){if(this.groupable&&row.group){if(this.groupCols[0].width>200){return groupIndex===0;}else{return groupIndex===1;}}
return false;},getConfig(){return{limit:this.currentLimit,order:this.currentOrder,filters:this.currentFilters,hidden:this.currentHidden};},getColumnsConfig(){return JSON.parse(JSON.stringify(this.cols));},setConfig(cfg,no_storage){if(cfg===false){cfg=bbn.fn.clone(this.defaultConfig);}
else if(cfg===true){cfg=this.getConfig();}
if(cfg&&cfg.limit){if(this.filterable&&cfg.filters&&(this.currentFilters!==cfg.filters)){this.currentFilters=cfg.filters;}
if(this.pageable&&(this.currentLimit!==cfg.limit)){this.currentLimit=cfg.limit;}
if(this.sortable&&(this.currentOrder!==cfg.order)){if(bbn.fn.isObject(cfg.order)){let currentOrder=[];bbn.fn.iterate(cfg.order,(v,n)=>{currentOrder.push({field:n,dir:v.toUpperCase()==='DESC'?'DESC':'ASC'});});this.currentOrder=currentOrder;}
else if(bbn.fn.isArray(cfg.order)){this.currentOrder=cfg.order;}}
if(this.showable){if((cfg.hidden!==undefined)&&(cfg.hidden!==this.currentHidden)){this.currentHidden=cfg.hidden;}
bbn.fn.each(this.cols,(a,i)=>{let hidden=(this.currentHidden.indexOf(i)>-1);if(a.hidden!==hidden){this.$set(this.cols[i],'hidden',hidden);}});}
this.currentConfig={limit:this.currentLimit,order:this.currentOrder,filters:this.currentFilters,hidden:this.currentHidden};if(!no_storage){this.setStorage(this.currentConfig);}
this.$forceUpdate();}},save(){this.savedConfig=this.jsonConfig;},checkSelection(index,state){let row=this.items[index];if(row){if(this.groupable&&row.group){if(row.expanded){bbn.fn.fori((d,i)=>{if(d&&d.selection&&(d.data[this.cols[this.group].field]===row.value)){this.checkSelection(i,state)}},this.items,index+row.num,index+1)}}
else if(row.selection){let idx=this.currentSelected.indexOf(this.uid?this.currentData[row.index].data[this.uid]:row.index);let isSelected=false;let toggled=false;if(idx>-1){if([undefined,false].includes(state)){toggled=true;this.$emit('unselect',row.data);this.currentSelected.splice(idx,1);}}
else if([undefined,true].includes(state)){toggled=true;this.$emit('select',row.data);this.currentSelected.push(this.uid?this.currentData[row.index].data[this.uid]:row.index);isSelected=true;}
if(toggled){this.$emit('toggle',isSelected,this.currentData[row.index].data);}}}},updateData(withoutOriginal){this.isTableDataUpdating=true;this.allRowsChecked=false;this.currentExpanded=[];this._removeTmp();this.editedRow=false;this.editedIndex=false;this.$forceUpdate();return bbn.vue.listComponent.methods.updateData.apply(this,[withoutOriginal]).then(()=>{if(this.currentData.length&&this.selection&&this.currentSelected.length&&!this.uid){this.currentSelected=[];}
if(this.editable){this.originalData=JSON.parse(JSON.stringify(this.currentData.map((a)=>{return a.data;})));}
this.isTableDataUpdating=false;});},isDirty(row,col,idx){return this.isBatch&&col&&(row.index!==this.editedIndex)&&!row.aggregated&&!row.groupAggregated&&(col.editable!==false)&&col.field&&this.originalData&&this.originalData[row.index]&&(row.data[col.field]!=this.originalData[row.index][col.field])},currentClass(column,data,index){let tr=this.trClass?(bbn.fn.isFunction(this.trClass)?this.trClass(data):this.trClass):'';if(column.cls){return(!!tr?(tr+' '):'')+(bbn.fn.isFunction(column.cls)?column.cls(data,index,column):column.cls);}
return tr||'';},isSorted(col){if(this.sortable&&(col.sortable!==false)&&!col.buttons&&col.field){let idx=bbn.fn.search(this.currentOrder,{field:col.field});if(idx>-1){return this.currentOrder[idx];}}
return false;},sort(col){if(!this.isLoading&&this.sortable&&col.field&&(col.sortable!==false)){let f=col.field,pos=bbn.fn.search(this.currentOrder,{field:f});if(pos>-1){if(this.currentOrder[pos].dir==='ASC'){this.currentOrder[pos].dir='DESC';}else{this.currentOrder.splice(0,this.currentOrder.length);}}else{this.currentOrder.splice(0,this.currentOrder.length);this.currentOrder.push({field:f,dir:'ASC'});}
if(this.isAjax){this.updateData();}}},updateTable(){return;},render(data,column,index){let value=data&&column.field?data[column.field]||'':undefined;if(column.render){return column.render(data,column,index,value)}
return this.renderData(data,column,index);},reset(noCfg){this.initReady=false;if(!noCfg){this.setConfig(false);}
this.$nextTick(()=>{this.init();})},addColumn(obj){if(obj.aggregate&&!Array.isArray(obj.aggregate)){obj.aggregate=[obj.aggregate];}
this.cols.push(obj);},isBeforeAggregated(groupIndex,idx){return this.isAggregated&&((this.groupCols[groupIndex].cols[idx+1]&&(this.groupCols[groupIndex].cols[idx+1].field===this.isAggregated))||(!this.groupCols[groupIndex].cols[idx+1]&&this.groupCols[groupIndex+1]&&this.groupCols[groupIndex+1].cols[0]&&(this.groupCols[groupIndex+1].cols[0].field===this.isAggregated)));},getDimensionWidth(width){if(bbn.fn.isNumber(width)&&width){return parseInt(width);}
let parent=this.$el||this.$root.$el;let r=0;if(parent&&width){if(!parent.insertAdjacentElement){return 0;}
let el=document.createElement('div');el.style.position='absolute';el.style.opacity=0;el.className='bbn-reset'
el.style.width=this.formatSize(width);try{parent.insertAdjacentElement('beforeend',el);}
catch(e){bbn.fn.log("Error while inserting adjacent element for dimensioncalculation",e,this.$el);return 0;}
r=el.offsetWidth||el.clientWidth||0;el.remove();}
return r;},resizeWidth(){let currentTot=this.groupCols[0].width+this.groupCols[1].width+this.groupCols[2].width,parentWidth=this.$el.offsetParent?this.$el.offsetParent.getBoundingClientRect().width:this.lastKnownCtWidth,diff=parentWidth-this.borderLeft-this.borderRight-currentTot,numDynCols=this.currentColumns.filter(c=>(c.width===undefined)&&!c.isExpander&&!c.isSelection&&!c.hidden).length,numStaticCols=this.currentColumns.filter(c=>!!c.width&&!c.isExpander&&!c.isSelection&&!c.hidden).length,newWidth=numDynCols||numStaticCols?(diff /(numDynCols||numStaticCols)):0;if(newWidth){bbn.fn.each(this.groupCols,(groupCol,groupIdx)=>{let sum=0,sumRight=0,sumLeft=0;bbn.fn.each((groupIdx!==2)?groupCol.cols:groupCol.cols.slice().reverse(),col=>{if(!col.hidden){if(!col.isExpander&&!col.isSelection&&((!!numDynCols&&(col.width===undefined))||(!numDynCols&&!!numStaticCols&&!!col.width))){let tmp=col.realWidth+newWidth;if((col.width!==undefined)&&(!bbn.fn.isString(col.width)||bbn.fn.isNumber(col.width.substr(-1)))){if(tmp<parseFloat(col.width)){tmp=parseFloat(col.width);}}
else if(tmp<(bbn.fn.isMobile()?this.minimumColumnWidthMobile:this.minimumColumnWidth)){tmp=bbn.fn.isMobile()?this.minimumColumnWidthMobile:this.minimumColumnWidth;}
let minWidth=this.getDimensionWidth(col.minWidth);let maxWidth=this.getDimensionWidth(col.maxWidth);if(col.minWidth&&(tmp<minWidth)){tmp=minWidth;}
if(col.maxWidth&&(tmp>maxWidth)){tmp=maxWidth;}
col.realWidth=tmp;}
sum+=col.realWidth;if(groupIdx===0){col.left=sumLeft;sumLeft+=col.realWidth;}
if(groupIdx===2){col.right=sumRight;sumRight+=col.realWidth;}}})
groupCol.width=sum;sum=0;sumLeft=0;sumRight=0;});this.isResizingWidth=false;}
return this;},isExpanded(d){if(this.allExpanded){return true;}
if(!this.expander&&((this.group===false)||!this.groupable)){return true;}
if(this.expander){return this.currentExpanded.indexOf(d.index)>-1;}
if(this.groupable&&(this.group!==false)&&this.cols[this.group]&&this.cols[this.group].field){if(d.data[this.cols[this.group].field]){return this.currentExpandedValues.indexOf(d.data[this.cols[this.group].field])>-1;}
return true;}
if((d.isGrouped||d.groupAggregated)&&(this.currentExpanded.indexOf(d.link)>-1)){return true;}
return false;},toggleExpanded(idx){if(this.currentData[idx]){if(this.allExpanded){this.allExpanded=false;}
if(this.groupable&&(this.group!==false)&&this.cols[this.group]&&this.cols[this.group].field&&(this.currentData[idx].data[this.cols[this.group].field]!==undefined)){let groupValue=this.currentData[idx].data[this.cols[this.group].field],groupIndex=this.currentExpandedValues.indexOf(groupValue);if(groupIndex>-1){this.currentExpandedValues.splice(groupIndex,1);}else{this.currentExpandedValues.push(groupValue);}}else{let i=this.currentExpanded.indexOf(idx);if(i>-1){this.currentExpanded.splice(i,1);}else{this.currentExpanded.push(idx);}}}},rowHasExpander(d){if(this.hasExpander){if(!bbn.fn.isFunction(this.expander)){return true;}
return!!this.expander(d);}
return false;},isSelected(index){return this.selection&&((!this.uid&&this.currentSelected.includes(index))||(this.uid&&this.currentSelected.includes(this.currentData[index].data[this.uid])));},hasTd(data,colIndex,groupIndex){let tdIndex=colIndex;for(let i=0;i<groupIndex;i++){tdIndex+=this.groupCols[groupIndex].cols.length;}
if(data.selection){if(tdIndex===0){return false;}else if(data.group||data.expander){if(tdIndex===1){return false;}}}
if(data.group||data.expander){if(tdIndex===0){return false;}}
if(data.group||data.expansion){return false;}
if(data.hidden){return false;}
return true;},init(with_data){this.keepCool(()=>{this.initStarted=true;this.setContainerMeasures();this.setResizeMeasures();let groupCols=[{name:'left',width:0,visible:0,cols:[]},{name:'main',width:0,visible:0,cols:[]},{name:'right',width:0,visible:0,cols:[]}],numUnknown=0,colButtons=false,isAggregated=false,aggregatedColIndex=false,aggregatedColTitle=false,aggregatedColumns=[],parentWidth=this.$el.offsetParent?this.$el.offsetParent.getBoundingClientRect().width:this.lastKnownCtWidth;this.groupCols=bbn.fn.clone(groupCols);bbn.fn.each(this.cols,(a)=>{a.realWidth=0;});this.$nextTick(()=>{bbn.fn.each(this.cols,(a,i)=>{if(!a.hidden&&(!this.groupable||(this.group!==i))){let minWidth=null;let maxWidth=null;if(a.minWidth){minWidth=this.getDimensionWidth(a.minWidth)}
if(a.maxWidth){maxWidth=this.getDimensionWidth(a.maxWidth)}
a.index=i;if(a.hidden){a.realWidth=0;}
else{if(this.aggregate&&a.aggregate){if(aggregatedColIndex===false){aggregatedColIndex=i;isAggregated=true;}
aggregatedColumns.push(a);}
if(a.width){if(bbn.fn.isString(a.width)&&(a.width.substr(-1)==='%')){a.realWidth=Math.floor(parentWidth*this.getDimensionWidth(a.width)/ 100);if(a.realWidth<(bbn.fn.isMobile()?this.minimumColumnWidthMobile:this.minimumColumnWidth)){a.realWidth=bbn.fn.isMobile()?this.minimumColumnWidthMobile:this.minimumColumnWidth;}}
else{a.realWidth=this.getDimensionWidth(a.width);}}
else{a.realWidth=bbn.fn.isMobile()?this.minimumColumnWidthMobile:this.minimumColumnWidth;numUnknown++;}
if(minWidth&&(a.realWidth<minWidth)){a.realWidth=minWidth;}
if(maxWidth&&(a.realWidth>maxWidth)){a.realWidth=maxWidth;}
if(a.buttons!==undefined){colButtons=i;}
if(a.fixed){if((a.fixed!=='right')&&((this.fixedDefaultSide!=='right')||(a.fixed==='left'))){groupCols[0].cols.push(a);if(!a.hidden){groupCols[0].visible++;}}
else{groupCols[2].cols.push(a);if(!a.hidden){groupCols[2].visible++;}}}
else{groupCols[1].cols.push(a);if(!a.hidden){groupCols[1].visible++;}}}}});let firstGroup=groupCols[0].visible?0:1;if(this.selection){let o={isExpander:false,isSelection:true,title:' ',filterable:false,width:40,realWidth:40};if(firstGroup===0){o.fixed=true;o.isLeft=true;}
groupCols[firstGroup].cols.unshift(o);groupCols[firstGroup].visible++;}
if(this.hasExpander){let o={isExpander:true,isSelection:false,title:' ',filterable:false,width:30,realWidth:30};if(firstGroup===0){o.fixed=true;o.isLeft=true;}
groupCols[firstGroup].cols.unshift(o);groupCols[firstGroup].visible++;}
let tot=0;bbn.fn.each(groupCols,(a)=>{a.sum=bbn.fn.sum(a.cols,'realWidth');tot+=a.sum;});let styles=window.getComputedStyle(this.$el),borderLeft=styles.getPropertyValue('border-left-width').slice(0,-2),borderRight=styles.getPropertyValue('border-right-width').slice(0,-2),toFill=parentWidth-borderLeft-borderRight-tot;this.borderLeft=borderLeft;this.borderRight=borderRight;if(toFill>0){if(numUnknown){let newWidth=toFill / numUnknown;if(newWidth<(bbn.fn.isMobile()?this.minimumColumnWidthMobile:this.minimumColumnWidth)){newWidth=bbn.fn.isMobile()?this.minimumColumnWidthMobile:this.minimumColumnWidth;}
let maxPreAggregatedWidth=0;bbn.fn.each(this.cols,(a,i)=>{if(!a.hidden){if(!a.width){a.realWidth=newWidth+(bbn.fn.isMobile()?this.minimumColumnWidthMobile:this.minimumColumnWidth);}
if(isAggregated&&(i<aggregatedColIndex)&&(a.realWidth>=maxPreAggregatedWidth)){maxPreAggregatedWidth=a.realWidth;aggregatedColTitle=a;}}});}
else{let num=this.numVisible;let ignore=0;if(this.hasExpander){num--;ignore++;}
if(this.selection){num--;ignore++;}
let bonus=toFill / num;let maxPreAggregatedWidth=0;bbn.fn.each(this.cols,(a,i)=>{if(!a.hidden&&(i>=ignore)){a.realWidth+=bonus;if(isAggregated&&(i<aggregatedColIndex)&&(a.realWidth>=maxPreAggregatedWidth)){maxPreAggregatedWidth=a.realWidth;aggregatedColTitle=a;}}});}}
if(aggregatedColTitle){aggregatedColTitle.isAggregatedTitle=true;}
let sum=0,sumLeft=0,sumRight=0;bbn.fn.each(groupCols,(a,i)=>{bbn.fn.each((i!==2)?a.cols:a.cols.slice().reverse(),c=>{if(!c.hidden){sum+=c.realWidth;if(i===0){c.left=sumLeft;sumLeft+=c.realWidth;}
else if(i===2){c.right=sumRight;sumRight+=c.realWidth;}}});a.width=sum;sum=0;sumLeft=0;sumRight=0;});this.groupCols=groupCols;this.colButtons=colButtons;this.isAggregated=isAggregated;this.aggregatedColumns=aggregatedColumns;this.resizeWidth();this.initReady=true;if(with_data){this.$nextTick(()=>{this.$once('dataloaded',()=>{this.initStarted=false;});this.updateData();})}
else{this.$nextTick(()=>{this.initStarted=false;});}});},'init',1000);},keydown(e){if(this.isBatch&&this.editedRow&&(e.which===9)||(e.which===13)){e.preventDefault();}},show(colIndexes,hide){if(!Array.isArray(colIndexes)){colIndexes=[colIndexes];}
bbn.fn.each(colIndexes,(colIndex)=>{if(this.cols[colIndex]){if((this.cols[colIndex].hidden&&!hide)||(!this.cols[colIndex].hidden&&hide)){let idx=this.currentHidden.indexOf(colIndex);if(hide&&(idx===-1)){this.currentHidden.push(colIndex);}else if(!hide&&(idx>-1)){this.currentHidden.splice(idx,1);}}}});this.$forceUpdate();this.setConfig(true);this.init(true);},getEditableComponent(col,data){if(col.editor){return col.editor;}
if(col.type){switch(col.type){case"date":return'bbn-datepicker';case"email":return'bbn-input';case"url":return'bbn-input';case"number":return'bbn-numeric';case"money":return'bbn-numeric';case"bool":case"boolean":return'bbn-checkbox';}}
if(col.source){return'bbn-dropdown';}
return'bbn-input';},getEditableOptions(col,data){let res=col.options?(bbn.fn.isFunction(col.options)?col.options(data,col):col.options):{};if(!res.name&&col.field){res.name=col.field;}
if(col.type){switch(col.type){case"date":break;case"email":bbn.fn.extend(res,{type:'email'});break;case"url":bbn.fn.extend(res,{type:'url'});break;case"number":break;case"money":break;case"bool":case"boolean":bbn.fn.extend(res,{value:1,novalue:0});break;}}
if(col.source){bbn.fn.extend(res,{source:col.source});}else if(col.editor){res.source=data;}
return res;},getTr(i){let row=false;if(bbn.fn.isNumber(i)){bbn.fn.each(this.getRef('tbody').rows,tr=>{if(tr.getAttribute('index')==i){row=tr;return true;}});}
return row;},defaultObject(){let o={};bbn.fn.iterate(bbn.vue.fieldComponent.props,(v,n)=>{if(v.default!==undefined){o[n]=bbn.fn.isFunction(v.default)?v.default():v.default;}})
return o;},showFilterOnColumn(col){if(!this.filterable||(col.filterable===false)||col.hideFilter){return false;}
if(col.filterable===true){return true;}
return!col.buttons&&col.field;},focusRow(ev,idx){if(ev.target.tagName!=='BUTTON'){this.focusedRow=idx;}},blurRow(ev,idx){if(ev.target.tagName!=='BUTTON'){this.focusedRow=false;}},clickCell(col,colIndex,dataIndex){if(this.filteredData[dataIndex]){this.$emit('click-row',this.filteredData[dataIndex].data,dataIndex);this.$emit('click-cell',col,colIndex,dataIndex);}},focusout(idx){if((idx===undefined)||(idx===this.focusedRow)){this.focused=false;setTimeout(()=>{if(!this.focused){this.focusedRow=false;}},50);}},focusin(idx,e){if(!e.target.closest('td')||!e.target.closest('td').classList.contains('bbn-table-buttons')||e.target.closest('td').classList.contains('bbn-table-edit-buttons')){this.focused=true;if(this.focusedRow!==idx){this.focusedRow=idx;}}},listOnBeforeMount(){},checkAll(){bbn.fn.each(this.items,(a,i)=>{this.checkSelection(i,true);})},uncheckAll(){bbn.fn.each(this.items,(a,i)=>{this.checkSelection(i,false);})},getDataIndex(itemIndex){return this.items[itemIndex]?this.items[itemIndex].index:-1;},setFocusedElement(ev){if(this.editable&&(this.editMode==='inline')&&(this.tmpRow||this.editedRow)&&(ev.target.tagName!=='TR')&&(ev.target.tagName!=='TD')){let e=ev.target.closest('td'),pos=e.getBoundingClientRect();this.focuseElementX=pos.x;this.focusedElementY=pos.y-pos.height;this.focusedElement=ev.target;}}},created(){this.componentClass.push('bbn-resize-emitter');if(this.$slots.default){let def=this.defaultObject();for(let node of this.$slots.default){bbn.fn.log("TRYING TO ADD COLUMN",node);if(node.componentOptions&&(node.componentOptions.tag==='bbns-column')){this.addColumn(bbn.fn.extend({},def,node.componentOptions.propsData));}
else if((node.tag==='bbns-column')&&node.data&&node.data.attrs){this.addColumn(bbn.fn.extend({},def,node.data.attrs));}
else if(node.tag==='tr'){this.hasTrSlot=true}}}
if(this.columns.length){bbn.fn.each(this.columns,a=>this.addColumn(a))}
if(this.defaultConfig.hidden===null){let tmp=[];let initColumn=[];bbn.fn.each(this.cols,(a,i)=>{if(a.hidden){tmp.push(i);}
else if(initColumn.length<=10){initColumn.push(i);}});this.defaultConfig.hidden=tmp;}
this.setConfig(false,true);this.initialConfig=this.jsonConfig;this.savedConfig=this.jsonConfig;let cfg=this.getStorage();if(cfg){this.setConfig(cfg,true);}
this.$on('addTmp',()=>{let scroll=this.getRef('scroll');if(bbn.fn.isVue(scroll)&&bbn.fn.isFunction(scroll.scrollStartY)&&bbn.fn.isFunction(scroll.scrollStartX)){scroll.scrollStartY();scroll.scrollStartX();}})},mounted(){this.container=this.getRef('container');this.marginStyleSheet=document.createElement('style');document.body.appendChild(this.marginStyleSheet);this.isTable=!!this.closest('bbn-table');let floater=this.closest('bbn-floater');if(floater){if(floater.ready){this.init();this.$once('dataloaded',()=>{this.ready=true;this.setResizeEvent();floater.onResize();});}
else{floater.$on('ready',()=>{this.init();this.$once('dataloaded',()=>{this.ready=true;this.setResizeEvent();floater.onResize();});});}
if(this.isAutobind){this.updateData();}}
else{this.$once('dataloaded',()=>{this.ready=true;});this.$nextTick(()=>{this.init(!!this.isAutobind);})}},watch:{columns(){if(this.ready){this.cols.splice(0,this.cols.length);if(this.columns.length){bbn.fn.each(this.columns,a=>this.addColumn(a))}
if(this.defaultConfig.hidden===null){let tmp=[];let initColumn=[];bbn.fn.each(this.cols,(a,i)=>{if(a.hidden){tmp.push(i);}
else if(initColumn.length<=10){initColumn.push(i);}});this.defaultConfig.hidden=tmp;}
this.init();}},observerDirty(v){if(v&&!this.editedRow){this.observerDirty=false;this.updateData();}},allRowsChecked(v){if(v){this.checkAll();}
else if(!this.isTableDataUpdating){this.uncheckAll();}},currentHidden:{deep:true,handler(){if(this.ready){this.setConfig(true);this.$forceUpdate();}}},group(){this.currentExpandedValues=[];this.currentExpanded=[];this.init();},focusedRow(newIndex,oldIndex){if(bbn.fn.isNumber(oldIndex)){this.$emit('focusout',oldIndex,this.items[oldIndex]?this.items[oldIndex].index:undefined);}
if(this.items[newIndex]){this.$emit('focus',this.items[newIndex].data,newIndex,this.items[newIndex].index);}
if(this.editable&&(this.editMode==='inline')){if(bbn.fn.isNumber(oldIndex)&&this.items[oldIndex]){let idx=this.items[oldIndex].index;if((this.editedIndex===idx)&&this.isModified(idx)){if(this.autoSave){this.saveInline();}
else if(this.autoReset){this.cancel();}
else{this.$emit('change',this.items[oldIndex].data,idx);}}}
this.editedRow=false;if(bbn.fn.isNumber(newIndex)&&this.items[newIndex]&&!this.items[newIndex].group&&!this.items[newIndex].expander){let comeFromAfter=bbn.fn.isNumber(oldIndex)&&(newIndex===(oldIndex-1));this.$nextTick(()=>{this.edit(this.items[newIndex].data,null,newIndex);this.$nextTick(()=>{let tr=this.getTr(newIndex),nextInputs=tr?tr.querySelectorAll('input'):[],nextInput;bbn.fn.each(nextInputs,a=>{if(a.offsetWidth){nextInput=a;if(!comeFromAfter){return false;}}});if(nextInput){nextInput.focus();}});});}}},lastKnownCtWidth(){if(this.groupCols.length&&!this.initStarted&&(this.groupCols[0].cols.length||this.groupCols[1].cols.length||this.groupCols[2].cols.length)){this.$nextTick(()=>{this.resizeWidth();})}}}});})(window.bbn,window.Vue);})(bbn);