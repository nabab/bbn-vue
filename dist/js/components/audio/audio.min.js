(bbn_resolve)=>{((bbn)=>{let script=document.createElement('script');script.innerHTML=`<div :class="[componentClass, 'bbn-iflex-height', {'bbn-box': skin}]"
     :style="{
       height: currentHeight,
       width: currentWidth
     }">
  <div v-if="title && (titlePosition === 'top')"
       :class="['bbn-c', 'bbn-audio-title', 'bbn-xspadded', {
         'bbn-header': skin,
         'bbn-radius-top': skin,
         'bbn-no-border-top': skin,
         'bbn-no-border-left': skin,
         'bbn-no-border-right': skin,
       }, titleCls]"
       v-html="title"
       :style="{
         background: titleBackground,
         color: titleColor
       }"/>
  <div class="bbn-audio-container bbn-flex-fill bbn-vmiddle"
       :style="{
         background: background
       }">
    <audio ref="audio"
           :autoplay="autoplay"
           :controls="controls"
           :loop="loop"
           :muted="muted"
           preload="auto"
           :style="{
             background: background
           }"
           :class="cls"
           @play="onPlay"
           @pause="onPause">
      <source v-if="source"
              :src="source"
              :type="type"/>
      <p v-text="browserMessage"/>
    </audio>
  </div>
  <div v-if="title && (titlePosition === 'bottom')"
       :class="['bbn-c', 'bbn-audio-title', 'bbn-xspadded', {
         'bbn-header': skin,
         'bbn-radius-bottom': skin,
         'bbn-no-border-bottom': skin,
         'bbn-no-border-left': skin,
         'bbn-no-border-right': skin,
       }, titleCls]"
       v-html="title"
       :style="{
         background: titleBackground,
         color: titleColor
       }"/>
</div>`;script.setAttribute('id','bbn-tpl-component-audio');script.setAttribute('type','text/x-template');document.body.insertAdjacentElement('beforeend',script);let css=document.createElement('link');css.setAttribute('rel','stylesheet');css.setAttribute('href',bbn.vue.libURL+'dist/js/components/audio/audio.css');document.head.insertAdjacentElement('beforeend',css);(function(bbn){"use strict";Vue.component('bbn-audio',{mixins:[bbn.vue.basicComponent],props:{source:{type:String,required:true},title:{type:String,default:''},titlePosition:{type:String,default:'top',validator:p=>['top','bottom'].includes(p)},titleBackground:{type:String},titleColor:{type:String},titleCls:{type:String},width:{type:[String,Number]},height:{type:[String,Number]},autoplay:{type:Boolean,default:false},controls:{type:Boolean,default:true},loop:{type:Boolean,default:false},muted:{type:Boolean,default:false},skin:{type:Boolean,default:false},background:{type:String},cls:{type:String}},data(){return{browserMessage:bbn._('Your browser does not support the audio tag.'),widget:null}},computed:{currentWidth(){return bbn.fn.isNumber(this.width)?this.width+'px':this.width;},currentHeight(){return bbn.fn.isNumber(this.height)?this.height+'px':this.height;},type(){if(this.source){switch(bbn.fn.substr(this.source,this.source.lastIndexOf('.')+1).toLowerCase()){case'mp3':return'audio/mpeg';case'wav':return'video/wav';case'ogg':return'audio/ogg';default:return'';}}
return false;}},methods:{play(){this.widget.play();},pause(){this.widget.pause();},onPlay(ev){this.$emit('play',ev,this);},onPause(ev){this.$emit('pause',ev,this);},},mounted(){this.widget=this.getRef('audio');if(this.muted){this.widget.muted=true;}},watch:{muted(newVal){this.widget.muted=!!newVal;},loop(newVal){this.widget.loop=!!newVal;}}});})(bbn);if(bbn_resolve){bbn_resolve("ok");}})(bbn);}