(bbn_resolve)=>{((bbn)=>{let script=document.createElement('script');script.innerHTML=`<div :class="componentClass"
     tabindex="0"
     @keydown.up.down.left.right.enter.space.page-down.page-up.end.home.prevent.stop="keyNav"
>
  <!-- A loader -->
  <div v-if="loading" class="loader">
    <bbn-loadicon></bbn-loadicon> <span v-text="_('Loading')"></span>...
  </div>
  <!-- The container: a scroll if root and scrollable, a div otherwise -->
  <component v-else-if="isInit && isLoaded"
             :is="isRoot && !!scrollable ? 'bbn-scroll' : 'div'"
             ref="scroll"
  >
    <div class="bbn-tree-helper-container"
         v-if="(draggable || sortable) && isRoot"
         ref="helperContainer">
      <ul class="bbn-tree-helper"
          ref="helper"
          v-show="!!tree.realDragging"
      ></ul>
    </div>
    <!-- Is this transition working? -->
    <transition name="bbn-tree-toggle"
                @after-enter="onOpen"
                @after-leave="onClose"
    >
      <!-- start of the list -->
      <ul v-if="filteredData.length && (isRoot || $parent.isExpanded)"
          :class="{
            'bbn-tree-child': !!level,
            'bbn-tree-root': isRoot
          }"
      >
        <!-- Tree node component -->
        <bbn-tree-node inline-template
                        v-for="(it, i) in filteredData"
                        :source="it"
                        :key="($vnode.key ? $vnode.key + '-' : '') + 'node-' + level + '-' + i"
                        :idx="it.index"
                        :component="it.component || component"
                        :selectable="it.selectable !== undefined ? it.selectable : selectable"
                        :multiple="it.multiple !== undefined ? it.multiple : multiple"
                        :level="level"
                        :selection="it.selection !== undefined ? it.selection : selection"
                        :flat="flat"
                        ref="node"
                        :quickFilter="quickFilter"
                        :sortable="it.sortable !== undefined ? it.sortable : sortable"
                        :uid="uid"
                        :tree-state="uid !== undefined ? _getTreeState(it.data[uid]) : {}">
          <li :class="['bbn-tree-node', 'bbn-vxxspadded', 'bbn-unselectable', {
                        'bbn-state-active': (isActive && !isSelected) || (tree.draggable && tree.dragging && (tree.dragging === _self)),
                        'bbn-state-selected': isSelected
                      }]"
              v-show="isVisible"
              :title="source.tooltip || textFromText">
            <!-- Sortable interface is set at the top -->
            <span v-if="sortable && (source.num === 1)"
                  :class="['bbn-w-100', 'bbn-tree-order-top', {
                    'bbn-tree-order': tree.dragging && (tree.dragging.parent === parent) && !quickFilter
                  }]"
                  :style="{
                    visibility: !!tree.dragging
                      && !!tree.overNode
                      && (tree.dragging.parent === tree.overNode.parent)
                      && (tree.overNode.source.num === 1)
                      && (tree.dragging.source.num > 1) ? 'visible' : 'hidden'
                  }"
                  ref="orderTop"
                  @dragover="drag"
                  @dragleave="leaveDrag"
                  @drop="drop"
                  @dragend="endDrag"
                  v-droppable:data="{node: _self}"/>
            <!-- The node starts here -->
            <span :class="['bbn-tree-node-block', getCls(source, tree) || '', {'bbn-tree-node-block-no-component': !!component}]">
              <!-- The expander -->
              <span :class="['bbn-tree-node-block-expander', {'bbn-p': numChildren}]"
                    @click="if ( !flat && numChildren && (level >= tree.minExpandLevel) ){
                      isExpanded = !isExpanded;
                    }"
                    @mouseover="if ( !flat && tree.draggable && tree.dragging && numChildren && (level >= tree.minExpandLevel) ){
                      isExpanded = true;
                    }">
                <!-- If there are no children we leave the white space -->
                <span v-if="flat || !numChildren || (level < tree.minExpandLevel)" v-html=" "/>
                <i v-else
                   :class="{
                      'nf nf-fa-caret_down': isExpanded,
                      'nf nf-fa-caret_right': !isExpanded
                    }"/>
              </span>

              <!-- The checkobox if selection -->
              <span v-if="tree.uid && (tree.selection || !!selection)">
                <bbn-checkbox :value="data[tree.uid]"
                              :checked="isChecked(data[tree.uid])"
                              @change="checkNode"
                              :disabled="isDisabled()"/>
              </span>

              <!-- The component if given -->
              <component v-if="!!component"
                          :is="component"
                          :source="data"/>

              <!-- Or the default context -->
              <bbn-context v-else
                            :context="true"
                            :source="getMenu"
                            @open="isActive = true"
                            @close="isActive = false"
                            style="cursor: unset">
                <span :class="['bbn-tree-node-block-selectable', {'bbn-p': !!selectable}]"
                      @dblclick="dblClickOnNode"
                      @click="clickOnNode"
                      @dragstart="startDrag"
                      @dragover="drag"
                      @dragleave="leaveDrag"
                      @drop="drop"
                      @dragend="endDrag"
                      @mouseup.left="
                      if ( !doubleClk ){
                        if ( !tree.realDragging && selectable ){
                          isSelected = !isSelected;
                        }
                        doubleClk = true;
                      }"
                      tabindex="0"
                      v-draggable.container.data.mode="tree.draggable ? {
                        mode: 'clone',
                        container: tree.getRef('helperContainer'),
                        data: {node: _self}
                      } : false"
                      v-droppable:data="tree.selfDrop ? {node: _self} : false"
                >
                  <!-- The item component if given -->
                  <component v-if="tree.itemComponent"
                             :is="tree.itemComponent"
                             :source="source"/>
                  <!-- Or the default template -->
                  <template v-else>
                    <span v-if="tree.icons"
                          class="bbn-tree-node-block-icon"
                    >
                      <!-- If icon is specifically false we leave the white space -->
                      <span v-if="source.icon === false"></span>
                      <!-- or if it's an image -->
                      <img v-else-if="source.icon && (source.icon.indexOf('data:image') === 0)"
                           :src="source.icon">
                      <!-- or if it's a class icon -->
                      <i v-else
                          :class="getIcon()"
                          :style="iconStyle"
                      ></i>
                    </span>
                    <!-- The node's text -->
                    <span class="bbn-tree-node-block-title">
                      <span v-html="source.text"></span>
                    </span>
                  </template>
                </span>
              </bbn-context>
            </span>

            <!-- If it has children another tree -->
            <bbn-tree v-if="!!numChildren"
                      ref="tree"
                      :key="'tree-' + level + '-' + idx"
                      class="bbn-text"
                      :component="component"
                      :source="tree.isAjax && !tree.hybrid ? tree.source : (data[tree.children] ? data[tree.children] : [])"
                      :level="level + 1"
                      :object="tree.object ? !tree.hybrid : false"
                      :autobind="false"
                      :filterable="isFilterable"
                      :flat="flat"
                      :filters="tree.filters"
                      :selectable="source.selectable !== undefined ? source.selectable : tree.selectable"
                      :selection="source.selection !== undefined ? source.selection : tree.selection"
                      :cls="source.cls !== undefined ? source.cls : tree.cls"
                      :quickFilter="quickFilter"
                      :sortable="source.sortable !== undefined ? source.sortable : tree.sortable"
                      :multiple="source.multiple !== undefined ? source.multiple : tree.multiple"
                      :uid="uid"
                      :state="treeState"
                      :opened="!!tree.opened"
                      :source-text="tree.sourceText"
                      :source-value="tree.sourceValue"
                      :scrollable="tree.scrollable"
            ></bbn-tree>

            <!-- Sortable interface is set at the bottom -->
            <span v-if="sortable"
                  :class="['bbn-w-100', 'bbn-tree-order-bottom', {
                    'bbn-tree-order': tree.dragging && (tree.dragging.parent === parent) && !quickFilter
                  }]"
                  :style="{
                    visibility: !!tree.dragging
                      && !!tree.overNode
                      && (tree.dragging.parent === tree.overNode.parent)
                      && (tree.overNode !== tree.dragging) ? 'visible' : 'hidden'
                  }"
                  ref="orderBottom"
                  @dragover="drag"
                  @dragleave="leaveDrag"
                  @drop="drop"
                  @dragend="endDrag"
                  v-droppable:data="{node: _self}"
            ></span>
          </li>
        </bbn-tree-node>
      </ul>
    </transition>
  </component>
  <h2 v-else-if="isRoot"
      v-html="_('No items') + '...'"
  ></h2>
</div>
`;script.setAttribute('id','bbn-tpl-component-tree');script.setAttribute('type','text/x-template');document.body.insertAdjacentElement('beforeend',script);let css=document.createElement('link');css.setAttribute('rel','stylesheet');css.setAttribute('href',bbn.vue.libURL+'dist/js/components/tree/tree.css');document.head.insertAdjacentElement('beforeend',css);(function(bbn){"use strict";const NODE_PROPERTIES=['text','icon','num','numChildren','data','cls','selectedClass','activeClass','selection','selectable','multiple','filterable','sortable','selected','expanded','component','tooltip','path','visible'];Vue.component('bbn-tree',{mixins:[bbn.vue.basicComponent,bbn.vue.localStorageComponent,bbn.vue.listComponent],props:{excludedSectionFilter:{type:Boolean,default:false},minExpandLevel:{type:Number,default:0},opened:{type:Boolean,default:false},source:{Type:[Array,String,Object,Function]},cls:{type:[Function,String]},component:{type:[Function,String,Object]},itemComponent:{type:[Function,String,Object]},draggable:{type:Boolean,default:false},menu:{type:[Array,Function]},icons:{type:Boolean,default:true},iconColor:{type:[String,Function]},root:{type:[String,Number]},level:{type:Number,default:0},droppables:{type:Array,default(){return[];}},object:{type:Boolean,default:false},selfDrop:{type:Boolean,default:true},transferData:{type:Function},path:{type:Array,default(){return[];}},selectable:{type:Boolean,default:true},hierarchy:{type:Boolean,default:true},quickFilter:{type:String,default:''},order:{type:Array,default(){return[{field:'num',dir:'ASC'}]}},state:{type:Object,default(){return{};}},hybrid:{type:Boolean,default:false},scrollable:{type:Boolean,default:true}},data(){return{isRoot:false,node:false,tree:false,url:typeof(this.source)==='string'?this.source:false,loading:false,isLoaded:false,isMounted:false,activeNode:false,overNode:false,dragging:false,realDragging:false,checked:[],disabled:[],currentExpanded:[],overOrder:false,nodes:[],currentState:{},isInit:false};},computed:{filteredData(){let ret=[];if(this.currentData.length&&this.currentFilters&&this.currentFilters.conditions&&this.currentFilters.conditions.length&&(!this.serverFiltering||!this.isAjax)){ret=bbn.fn.filter(this.currentData,a=>{return this._checkConditionsOnItem(this.currentFilters,a.data);});}
else{ret=this.currentData;}
if(this.sortable&&this.order.length){ret=bbn.fn.multiorder(ret,this.order);ret=bbn.fn.map(ret,(v,i)=>{v.num=i+1;return v;});}
return ret;},selectedNode(){return this.tree&&this.tree.currentSelected.length?this.tree.currentSelected[this.tree.currentSelected.length-1]:false;},droppableTrees(){let r=this.selfDrop?[this]:[];if(this.droppables.length){r.push(...this.droppables);}
return r;}},methods:{_objectMapper(items){let res=[];if(bbn.fn.isArray(items)){bbn.fn.each(items,(a,i)=>{let numChildren=0;let o={text:bbn._('Node')+' '+i,numChildren:numChildren};if(a!==undefined){if(bbn.fn.isArray(a)){numChildren=a.length;}
else if(typeof a==='object'){numChildren=bbn.fn.numProperties(a);}
else{o.text=typeof a==='string'?a:a.toString();}}
if(numChildren){o.numChildren=numChildren;o[this.children]=this._objectMapper(a);}
res.push(o);})}
else if(items&&(typeof items==='object')&&bbn.fn.numProperties(items)){bbn.fn.iterate(items,(a,n)=>{let numChildren=0;let o={text:n,numChildren:numChildren};if(a!==undefined){if(bbn.fn.isArray(a)){numChildren=a.length;}
else if(typeof a==='object'){numChildren=bbn.fn.numProperties(a);}
else{o.text=('<strong>'+o.text+': </strong>'+a);}}
if(numChildren){o.numChildren=numChildren;o[this.children]=this._objectMapper(a);}
res.push(o);});}
return res;},_getTreeState(uid){if((uid!==undefined)&&this.currentState[uid]){return this.currentState[uid].items;}
return{};},_map(items){if(this.object){items=this._objectMapper(items.reduce((r,k)=>{r[k.value]=k.text;return r;},{}));}
items=bbn.fn.map(items,item=>{let o={};if(this.tree.map){item=this.tree.map(item.data!==undefined?item.data:item,this.level+1,item.data!==undefined?item:{});}
bbn.fn.each(NODE_PROPERTIES,p=>{o[p]=p==='text'?item[this.tree.sourceText]:item[p];});if(!!item.data&&!!item.data[this.tree.children]){o.numChildren=item.data[this.tree.children].length;}
if(!!item[this.tree.children]){o.numChildren=item[this.tree.children].length;}
if(o.data===undefined){o.data=item;}
return o;});return items;},reset(){this.isLoaded=false;this.updateData();},resize(){let scroll=this.tree.getRef('scroll');if(scroll&&bbn.fn.isFunction(scroll.onResize)){scroll.onResize();}},onOpen(){this.resize();this.$emit('open');this.tree.$emit('open',this);},onClose(){this.resize();this.$emit('close');this.tree.$emit('close',this);},findNode(props){let ret=false;if(this.isRoot||(this.node.numChildren&&bbn.fn.isObject(props))){if(!this.isRoot&&!this.node.isExpanded){this.node.isExpanded=true;}
let cp=this.isRoot&&this.scrollable?this.getRef('scroll'):this;if(cp.$children){let idx=bbn.fn.search(bbn.fn.arrayFromProp(cp.$children.filter(a=>a.$options&&(a.$options._componentTag==='bbn-tree-node')),'data'),props);if(idx>-1){ret=cp.$children[idx];}}}
return ret;},getNodeByIdx(idx){if(bbn.fn.isNumber(idx)&&this.nodes.length){return bbn.fn.getRow(this.nodes,{idx:parseInt(idx)});}
return false;},addNode(obj){if(bbn.fn.isObject(obj)){obj=this._map([obj])[0];obj._bbn=true;obj.index=this.currentData.length;this.currentData.push(obj);return obj;}
return false;},getMenu(node){let menu=[],tree=node.getRef('tree');if(node.numChildren){menu.push({text:node.isExpanded?bbn._("Close"):bbn._("Open"),icon:node.isExpanded?'nf nf-fa-arrow_circle_up':'nf nf-fa-arrow_circle_down',action:()=>{node.isExpanded=!node.isExpanded;}});}
if(this.isAjax&&node.numChildren&&tree&&tree.isLoaded){menu.push({text:bbn._("Refresh"),icon:'nf nf-fa-refresh',action:()=>{this.reload(node);}})}
if(this.menu){let m2=bbn.fn.isFunction(this.menu)?this.menu(node,node.idx):this.menu;if(m2.length){bbn.fn.each(m2,function(a,i){menu.push({text:a.text,icon:a.icon?a.icon:'',action:a.action?()=>{a.action(node)}:false});})}}
return menu;},getPostData(){let r={},uid=this.uid||this.tree.uid;if(uid){if(this.node){r[uid]=this.node.data&&this.node.data[uid]?this.node.data[uid]:'';}
else if(this.isRoot){r[uid]=this.root?this.root:'';}}
else if(this.node){r=this.node.data;}
if(bbn.fn.isFunction(this.tree.data)){r=bbn.fn.extend(true,{},this.tree.data(this.node?this.node.data:{}),r);}
else{r=bbn.fn.extend(true,{},this.tree.data,r);}
return r;},keyNav(e){this.tree.$emit('keynav',e.key);if(this.tree.activeNode){let parent=this.tree.activeNode.parent;let data=parent.filteredData.filter(d=>!!d.visible);let min=0;let max=data.length-1;let idx=bbn.fn.search(data,{index:this.tree.activeNode.idx});let subtree=this.tree.activeNode.getRef('tree');switch(e.key){case'Enter':case' ':if(this.tree.activeNode.selectable){this.tree.activeNode.isSelected=!this.tree.activeNode.isSelected;}
else{let ev=new Event('nodeClick',{cancelable:true});this.tree.$emit('nodeClick',this.tree.activeNode,ev);}
break;case'PageDown':case'End':if(data.length){bbn.fn.getRow(parent.nodes,{idx:data[data.length-1].index}).isActive=true;this.scrollToActive();}
break;case'PageUp':case'Home':if(data.length){bbn.fn.getRow(parent.nodes,{idx:data[0].index}).isActive=true;this.scrollToActive();}
break;case'ArrowLeft':if(this.tree.activeNode.numChildren&&this.tree.activeNode.isExpanded){this.tree.activeNode.isExpanded=false;}
else if(!this.tree.activeNode.parent.isRoot){this.tree.activeNode.parent.node.isActive=true;this.scrollToActive();}
break;case'ArrowRight':if(this.tree.activeNode.numChildren){if(!this.tree.activeNode.isExpanded){this.tree.activeNode.isExpanded=true;}
else if(subtree&&subtree.nodes.length){bbn.fn.getRow(subtree.nodes,{idx:subtree.filteredData[0].index}).isActive=true;this.scrollToActive();}}
break;case'ArrowDown':if((idx+1)<=max){bbn.fn.getRow(parent.nodes,{idx:data[idx+1].index}).isActive=true;this.scrollToActive();}
else if(parent.node&&parent.node.parent){data=parent.node.parent.filteredData.filter(d=>!!d.visible);idx=bbn.fn.search(data,{index:parent.node.idx});if((idx>-1)&&data[idx+1]){bbn.fn.getRow(parent.node.parent.nodes,{idx:data[idx+1].index}).isActive=true;this.scrollToActive();}}
break;case'ArrowUp':if((idx-1)>=min){bbn.fn.getRow(parent.nodes,{idx:data[idx-1].index}).isActive=true;this.scrollToActive();}
else if(!parent.isRoot&&parent.node){parent.node.isActive=true;this.scrollToActive();}
break;}}
else if(this.tree.selectedNode){this.tree.activeNode=this.tree.selectedNode;this.scrollToActive();}
else if(this.tree.filteredData.length){bbn.fn.getRow(this.tree.nodes,{idx:this.tree.filteredData[0].index}).isActive=true;this.scrollToActive();}},reload(node){if(this.isRoot&&!node){this.isLoaded=false;return this.init();}
else{node=!node?this.node:node;let tree=node.getRef('tree');if(tree){tree.isLoaded=false;return tree.updateData();}}},load(){this.updateData();},getNodeByUid(uid){let res=false;if(this.uid){bbn.fn.each(this.findAll('bbn-tree-node'),e=>{if(e.source&&e.source.data&&(e.source.data[this.uid]===uid)){res=e;return false;}})}
return res;},getNodePath(node,field){let f=field||this.uid||false,obj=Object.keys(node.data).length?bbn.fn.extend(true,{},node.data):false,fromObj=!f||(node.data[f]===undefined);if(!fromObj||obj){let r=[fromObj?obj:node.data[f]],tree=node.parent;while(tree&&(tree!==this)){node=tree.node;r.unshift(fromObj?bbn.fn.extend(true,{},node.data):node.data[f]);tree=node.parent;}
return r;}
return false;},unselect(){if(this.tree.selectedNode){this.tree.selectedNode.isSelected=false;if(!this.multiple){this.$emit('unselect',this);}}},deactivateAll(){if(this.tree.activeNode){this.tree.activeNode.isActive=true;}},isNodeOf(childNode,parentNode){childNode=bbn.vue.closest(childNode,'bbn-tree-node');while(childNode){if(childNode===parentNode){return true;}
childNode=bbn.vue.closest(childNode,'bbn-tree-node');}
return false;},move(node,target,force=false){let ev=new Event("move",{cancelable:!force});this.tree.$emit('move',node,target,ev);if(!ev.defaultPrevented){let parent=node.parent;let idx=!!node.parent?bbn.fn.search(parent.currentData,{index:node.idx}):-1;let nodes=node.findAll('bbn-tree-node');let expanded=nodes.filter(n=>!!n.isExpanded);let selected=nodes.filter(n=>!!n.isSelected);if((idx>=0)&&parent){if(!target.source.numChildren){target.$set(target.source,'numChildren',1);}
else{target.source.numChildren++;}
this.$nextTick(()=>{let targetTree=target.getRef('tree');if(node.isExpanded){expanded.unshift(node);}
if(node.isSelected){selected.unshift(node);}
if(parent.node){parent.node.numChildren--;}
if(this.tree.isAjax){let nodeSource=bbn.fn.extend(true,{},parent.currentData[idx]);if(bbn.fn.isFunction(this.transferData)){nodeSource=this.transferData(nodeSource);}
if(!target.isExpanded){targetTree.$once('dataloaded',()=>{nodeSource.num=targetTree.currentData.length||1;nodeSource.index=nodeSource.num-1;target.source.data[this.tree.children].push(nodeSource);});}
else{nodeSource.num=targetTree.currentData.length||1;nodeSource.index=nodeSource.num-1;target.source.data[this.tree.children].push(nodeSource);}}
else{let nodeSource=parent.source.splice(idx,1)[0];if(bbn.fn.isFunction(this.transferData)){nodeSource=this.transferData(nodeSource);}
if(!bbn.fn.isArray(target.source.data[this.tree.children])){target.$set(target.source.data,this.tree.children,[]);}
target.source.data[this.tree.children].push(nodeSource);}
bbn.fn.each(expanded,n=>{n.removeFromExpanded(false);});bbn.fn.each(selected,n=>{n.removeFromSelected(false);});parent.currentData.splice(idx,1);this.$nextTick(()=>{if(!target.isExpanded){target.isExpanded=true;}
if(!this.tree.isAjax){let path=target.getPath();targetTree.updateData().then(()=>{targetTree.expandPath(path);});}});});}}},toData(data){let r={};for(let n in data){if(NODE_PROPERTIES.indexOf(n)===-1){r[n]=data[n];}}
return r;},getConfig(){let cfg={expanded:[],selected:[],state:this.currentState};if(!this.uid){return cfg;}
bbn.fn.each(this.currentExpanded,c=>{if(c.data&&c.data[this.uid]){cfg.expanded.push(c.data[this.uid])}});bbn.fn.each(this.currentSelected,c=>{if(c.data&&c.data[this.uid]&&(!!this.multiple||!cfg.selected.length)){cfg.selected.push(c.data[this.uid])}});return cfg;},getLocalStorage(){if(this.isRoot&&this.hasStorage){return this.getStorage(this.storageFullName||this.storageName,!!this.storageFullName);}},setLocalStorage(){let ev=new Event('setStorage',{cancelable:true}),cfg=this.getConfig();this.$emit('setStorage',cfg,this.storageFullName||this.storageName,ev);if(!ev.defaultPrevented){this.setStorage(cfg,this.storageFullName||this.storageName,!!this.storageFullName);}},scrollToSelected(){if(this.tree&&this.tree.selectedNode){let scroll=this.tree.getRef('scroll');if(scroll){scroll.scrollTo(0,this.tree.selectedNode.$el);}}},scrollToActive(){if(this.tree&&this.tree.activeNode){let scroll=this.tree.getRef('scroll');if(scroll){scroll.scrollTo(0,this.tree.activeNode.$el);}}},_setCurrentState(state){this.currentState=state;},initStorage(){let state;if(this.hasStorage&&this.isRoot){let storage=this.getLocalStorage();if(storage){state=storage.state||null;}}
else if(this.state){state=this.state;}
if(state){this._setCurrentState(state);}},expandPath(path,field,select=false,time=1){field=field||this.uid||false;if(field&&path&&path.length){if(!bbn.fn.isArray(path)){path=[path];}
let currentPaths=path.slice(),uid=currentPaths.shift(),isLast=!currentPaths.length;if((uid!==undefined)){if(this.isLoading||!this.isLoaded){this.$once('dataloaded',()=>{this.$nextTick(()=>{this.expandPath(path,field,select);});});}
else if(this.isLoaded&&!this.isLoading){this.$nextTick(()=>{let node=this.findNode({[field]:uid});if(node){if(isLast&&!!select){node.isSelected=true;}
else if(!!node.numChildren){let tree=node.getRef('tree');if(tree){if(!node.isExpanded){tree.$once('dataloaded',()=>{this.$nextTick(()=>{tree.expandPath(currentPaths,field,select);})});node.isExpanded=true;}
else if(!isLast){tree.expandPath(currentPaths,field,select);}}}}
else if(time===1){setTimeout(()=>{this.expandPath(path,field,select,2);},100);}})}}}},selectPath(path,field){this.expandPath(path,field,true);},initState(){if((this.node.isExpanded||this.isRoot||bbn.fn.count(Object.values(this.currentState),{expanded:true})||bbn.fn.count(Object.values(this.currentState),{selected:true}))&&bbn.fn.numProperties(this.currentState)&&this.filteredData.length){setTimeout(()=>{bbn.fn.iterate(this.currentState,(o,uid)=>{let it=this.uid!==undefined?this.findNode({[this.uid]:uid}):false;if(it){if((o.items&&bbn.fn.numProperties(o.items))||o.expanded){it.isExpanded=true;}
if(o.selected){if(it.selectable){it.isSelected=true;}
else{o.selected=false;}}}
else{delete this.currentState[uid];}})},50);}},init(){if(this.node.isExpanded||this.isRoot||bbn.fn.count(Object.values(this.currentState),{expanded:true})||bbn.fn.count(Object.values(this.currentState),{selected:true})){return this.updateData().then(()=>{this.isInit=true;this.initState();});}
else{this.isInit=true;}},listOnBeforeMount(){return;},afterUpdate(){if(!this.isLoaded&&this.ready&&!this.tree.autobind){this.$once('dataloaded',()=>{this.$nextTick(this.initState);});}}},created(){this.$on('beforeupdate',e=>{if(this.isAjax&&(this.tree.isLoading||this.isLoading)){e.preventDefault();}
if(!e.defaultPrevented){this.tree.$emit('beforeload',this.getPostData());}});this.$on('startloading',()=>{this.loading=true;});this.$on('datareceived',d=>{this.loading=false;this.tree.$emit('load',d);});this.$on('dataloaded',d=>{this.tree.$emit('afterload',d);});if(bbn.fn.isFunction(this.source)){this.isFunction=true;}
let cp=this.closest('bbn-tree');if(!cp){this.isRoot=true;this.node=false;this.tree=this;}
else{while(cp&&cp.level){cp=cp.closest('bbn-tree');}
if(cp&&!cp.level){this.tree=cp;this.isAjax=this.tree.isAjax&&!this.tree.hybrid;}
this.node=this.closest('bbn-tree-node');}},mounted(){this.ready=true;this.initStorage();if(this.tree.autobind){this.$nextTick(()=>{this.init();})}
else{this.isInit=true;}},watch:{activeNode(newVal){if(newVal&&this.isRoot){let scroll=this.getRef('scroll');if(scroll){}}},selectedNode(newVal){if(newVal&&this.isRoot){let scroll=this.getRef('scroll');if(scroll){}}},dragging(newVal){if(!newVal){this.overNode=false;this.overOrder=false;}}},components:{'bbn-tree-node':{name:'bbn-tree-node',props:{filterString:{type:String},excludedSectionFilter:{type:Boolean,default:false},selectable:{type:Boolean,default:false},multiple:{type:Boolean,default:false},selection:{type:Boolean,default:true},path:{type:Array,default(){return[];}},component:{type:[String,Function,Vue,Object]},source:{type:Object,default(){return{};}},level:{type:Number,default:1},idx:{type:Number},quickFilter:{type:String,default:''},sortable:{type:Boolean,default:true},uid:{type:String},treeState:{type:Object,default(){return{};}},flat:{type:Boolean,default:false}},data(){return{ready:false,doubleClk:false,parent:false,tree:false,isActive:false,animation:this.level>0,isMounted:false,orderOver:false}},computed:{isOverOrderTop(){return this.tree&&this.tree.realDragging&&this.tree.overOrder&&(this.tree.overOrder===this.getRef('orderTop'));},isOverOrderBottom(){return this.tree&&this.tree.realDragging&&this.tree.overOrder&&(this.tree.overOrder===this.getRef('orderBottom'));},data(){return this.source.data;},isVisible(){let tree=this.getRef('tree');return!this.quickFilter||((this.source.text.toLowerCase().indexOf(this.quickFilter.toLowerCase())>-1)&&!this.numChildren)||((this.source.text.toLowerCase().indexOf(this.quickFilter.toLowerCase())>-1)&&!this.tree.excludedSectionFilter)||((this.source.text.toLowerCase().indexOf(this.quickFilter.toLowerCase())>-1)&&!!this.tree.excludedSectionFilter&&!!(tree&&tree.nodes&&tree.nodes.filter(n=>!!n.isVisible).length))||!!(tree&&tree.nodes&&tree.nodes.filter(n=>!!n.isVisible).length)},isExpanded:{get(){return!!this.source.expanded;},set(v){this.source.expanded=v;}},isSelected:{get(){return!!this.source.selected;},set(v){this.source.selected=v;}},isFilterable(){return this.source.filterable!==undefined?!!this.source.filterable:!!this.tree.filterable;},hasFilters(){let tree=this.getRef('tree');return tree&&tree.hasFilters;},numChildren:{get(){return this.source.numChildren;},set(v){this.source.numChildren=v;}},iconStyle(){let style={};if(this.tree.iconColor){style.color=bbn.fn.isFunction(this.tree.iconColor)?this.tree.iconColor(this):this.tree.iconColor;}
return style;},menu(){return this.getMenu()},textFromText(){if(this.source.data.text){return bbn.fn.html2text(this.source.data.text)}
return'';}},methods:{randomString:bbn.fn.randomString,isChecked(uid){return this.tree.checked.includes(uid)},isDisabled(){return this.tree.disabled.includes(this.data[this.tree.uid])},checkNode(val){if(val&&this.data[this.tree.uid]&&!this.tree.checked.includes(this.data[this.tree.uid])){this.tree.checked.push(this.data[this.tree.uid]);this.tree.$emit('check',this.data[this.tree.uid]);}
else if(!val){let tmp=this.tree.checked.indexOf(this.data[this.tree.uid]);if(tmp>-1){this.tree.checked.splice(tmp,1);this.tree.$emit('uncheck',this.data[this.tree.uid]);}}},activate(){this.isActive=true;},update(attr){for(let n in attr){this[n]=attr[n];}},resize(){this.tree.resize();},reload(){this.tree.reload(this);},getMenu(){return this.tree.getMenu(this);},beforeEnter(){if(this.animation){}},enter(){if(this.animation){}},afterEnter(){if(this.animation){}},startDrag(e){if((this.tree.draggable||this.sortable)&&!this.tree.realDragging){if(this.tree.selectedNode){}
this.tree.$emit("dragstart",this,e);if(!e.defaultPrevented){this.tree.dragging=this;this.tree.realDragging=true;if(this.tree.droppableTrees.length){bbn.fn.each(this.tree.droppableTrees,dt=>{if(dt!==this.tree){dt.dragging=this;}});}}}
else{e.preventDefault();}},drag(e){this.mouseOver();if(this.sortable){if(e.target.classList.contains('bbn-tree-order')){if(this.tree.overOrder!==e.target){this.tree.overOrder=e.target;}}
else{this.tree.overOrder=false;}}
if(!!this.tree.dragging){let subTree=this.getRef('tree');if(!!this.tree.overNode&&(this===this.tree.overNode)&&(this!==this.tree.dragging)&&!this.tree.isNodeOf(this,this.tree.dragging)&&((!subTree||(subTree!==this.parent)))){this.tree.$emit("dragover",this,this.tree.dragging,e);if(e.defaultPrevented){this.tree.overNode=false;}}
else{this.tree.overNode=false;}}},leaveDrag(e){this.tree.overNode=false;},drop(e){e.preventDefault();e.stopImmediatePropagation();if(this.tree.dragging&&this.tree.overNode&&(this===this.tree.overNode)){let ev=new CustomEvent('drop',{cancelable:true,bubbles:true,detail:e.detail});let originalTree=this.tree.dragging.tree;this.tree.$emit('drop',this.tree.dragging,this,ev);if(!ev.defaultPrevented){if(this.tree.overOrder){let numBefore=this.tree.dragging.source.num,numAfter=this.tree.overOrder.classList.contains('bbn-tree-order-top')?1:this.tree.overNode.source.num+(numBefore>this.tree.overNode.source.num?1:0);if((numBefore!==numAfter)&&(this.tree.dragging.parent===this.tree.overNode.parent)){this.reorder(this.tree.dragging.source.num,numAfter);}}
else if(this.tree.draggable&&(this.tree.dragging.parent!==this.tree.overNode)){originalTree.move(this.tree.dragging,this);}}}
let ev=new CustomEvent('dragend',{cancelable:true,bubbles:true});this.tree.$emit('dragend',ev);},endDrag(e){e.preventDefault();e.stopImmediatePropagation();let ev=new CustomEvent('dragend',{cancelable:true,bubbles:true});this.tree.$emit('dragend',this.source,ev);if(!ev.defaultPrevented){bbn.fn.each(this.tree.dragging.tree.droppableTrees,dt=>{dt.overNode=false;dt.realDragging=false;dt.dragging=false;});if(!!this.tree.dragging&&!this.tree.dragging.tree.selfDrop){this.tree.dragging.tree.overNode=false;this.tree.dragging.tree.realDragging=false;this.tree.dragging.tree.dragging=false;}}},reorder(oldNum,newNum,force){if(oldNum!==newNum){let arr=this.parent.filteredData.slice();let ele=arr.splice(oldNum-1,1);let ev=new Event('beforeOrder',{cancelable:true});if(ele.length){if(!force){this.tree.$emit('beforeOrder',oldNum,newNum,this.tree.dragging,ev);}
if(!!force||!ev.defaultPrevented){arr.splice(newNum-1,0,ele[0]);bbn.fn.each(arr,(e,i)=>{if(e.num!==(i+1)){let data=bbn.fn.extend(true,{},e.data);e.num=i+1;if(e.data.num!==undefined){}
this.tree.$emit('order',data,e.num);}});}}}},mouseOver(){this.tree.overNode=this.tree.dragging&&(this!==this.tree.dragging)&&(this.tree.draggable||this.sortable)?this:false;},checkPath(){return;if(this.tree.path.length>this.level){let item=this.tree.path.slice(this.level,this.level+1)[0],type=typeof item,match=false;if((type==='object')&&(bbn.fn.search([this.data],item)===0)){match=true;}
else if(this.tree.uid&&this.data[this.tree.uid]&&(this.data[this.tree.uid]===item)){match=true;}
else if((type==='number')&&(this.idx===item)){match=true;}
if(match){if(this.tree.path.length>(this.level+1)){this.isExpanded=true;}
else{if(this.numChildren){this.isExpanded=true;}
this.isSelected=true;this.tree.$refs.scroll.scrollTo(0,this.$el);}}}},getFullPath(separator,field){let f=field||this.uid||false;if(f){let st='';let p=this;while(p&&p.is('bbn-tree-node')){if(p.data[f]){if(p!==this){st=separator+st;}
st=p.data[f]+st;p=p.parent.$parent;}
else{return false;}}
return st;}
return false;},getPath(field){return this.tree.getNodePath(this,field);},addToSelected(emit=true,storage=true){if(!this.tree.currentSelected.includes(this)){let sameParent=this.tree.selectedNode&&(this.tree.selectedNode.parent===this.parent);if((this.tree.selectedNode&&!this.tree.multiple)||(sameParent&&!this.parent.multiple)){this.tree.selectedNode.isSelected=false;}
let ev=new Event('beforeSelect',{cancelable:true});if(emit){this.tree.$emit('beforeSelect',this,ev);}
if(!ev.defaultPrevented){this.tree.currentSelected.push(this);if(emit){this.tree.$emit('select',this);}
if(this.tree!==this.parent){this.parent.currentSelected.push(this);if(emit){this.parent.$emit('select',this);}}
if(!!this.uid){let path=this.tree.getNodePath(this);path.reduce((o,uid)=>{if(!uid||!o){return undefined;}
if(o[uid]===undefined){o[uid]={expanded:false,items:{},selected:false};}
if((uid===this.data[this.uid])&&!o[uid].selected){o[uid].selected=true;}
return o[uid].items;},this.tree.currentState)}
if(storage){this.$nextTick(()=>{this.tree.setLocalStorage();})}}}},removeFromSelected(emit=true,storage=true){let idx=this.tree.currentSelected.indexOf(this);let idx2=this.parent.currentSelected.indexOf(this);let ev=new Event('beforeUnselect',{cancelable:true});if(emit){this.tree.$emit('beforeUnselect',this,ev);}
if(!ev.defaultPrevented){let path=[];if(!!this.uid){path=this.tree.getNodePath(this);}
if(idx>-1){this.tree.currentSelected.splice(idx,1);if(emit&&(this.multiple||!this.tree.currentSelected.length)){this.tree.$emit('unselect',this);}}
if((idx2>-1)&&(this.tree!==this.parent)){this.parent.currentSelected.splice(idx,1);if(emit&&(this.multiple||!this.tree.currentSelected.length)){this.parent.$emit('unselect',this);}}
if(!!this.uid){let last=path[path.length-1];path.reduce((o,uid)=>{if(!uid||!o){return undefined;}
if(o[uid]){if(uid===last){o[uid].selected=false;if(!bbn.fn.numProperties(o[uid].items)&&!o[uid].expanded){delete o[uid];}}}
return!!o[uid]?o[uid].items:false;},this.tree.currentState);}
if(storage){this.$nextTick(()=>{this.tree.setLocalStorage();})}}},addToExpanded(emit=true,storage=true){if(!this.tree.currentExpanded.includes(this)){let ev;if(emit){ev=new Event('beforeUnfold',{cancelable:true});this.tree.$emit('beforeUnfold',this,ev);}
if(!emit||!ev.defaultPrevented){this.tree.currentExpanded.push(this);if(emit){this.tree.$emit('unfold',this);}
let parent=this.parent;while(parent&&(parent!==this.tree)){parent.currentExpanded.push(this);parent=parent.node?parent.node.parent:null;}
if(!!this.uid){let path=this.tree.getNodePath(this);path.reduce((o,uid)=>{if(!uid||!o){return undefined;}
if(o[uid]===undefined){o[uid]={expanded:true,items:{},selected:false};}
else if(!o[uid].expanded){o[uid].expanded=true;}
return o[uid].items;},this.tree.currentState)}
if(storage){this.$nextTick(()=>{this.tree.setLocalStorage();});}
return true;}}
return false;},removeFromExpanded(emit=true,storage=true){let idx=this.tree.currentExpanded.indexOf(this);if(idx>-1){let ev;if(emit){ev=new Event('beforeFold',{cancelable:true});this.tree.$emit('beforeFold',this,ev);}
if(!emit||!ev.defaultPrevented){let path=[];if(!!this.uid){path=this.tree.getNodePath(this);}
let parent=this.parent;while(parent&&(parent!==this.tree)){let idx2=parent.currentExpanded.indexOf(this);if(idx2>-1){parent.currentExpanded.splice(idx2,1);}
parent=parent.node?parent.node.parent:null;}
this.tree.currentExpanded.splice(idx,1);if(!!this.uid){let last=path[path.length-1];path.reduce((o,uid)=>{if(!uid||!o){return undefined;}
if(o[uid]){if(uid===last){o[uid].expanded=false;if(!o[uid].selected){delete o[uid];}}}
return!!o[uid]?o[uid].items:false;},this.tree.currentState);}
if(storage){this.$nextTick(()=>{this.tree.setLocalStorage();});}
if(emit){this.tree.$emit('fold',this);}}
return true;}
return false;},clickOnNode(ev){this.tree.$emit('nodeClick',this,ev);},dblClickOnNode(ev){this.tree.$emit('nodeDblclick',this,ev);},getIcon(){return this.source.icon||(!!this.numChildren?(this.isExpanded?'nf nf-fa-folder_open':'nf nf-fa-folder'):'nf nf-fa-file');},remove(){if(!this.parent.isAjax){this.parent.currentData.splice(this.idx,1);}},getCls(source,tree){return source.cls!==undefined?source.cls:(bbn.fn.isFunction(tree.cls)?tree.cls():tree.cls||'');}},created(){this.parent=this.closest('bbn-tree');this.tree=this.parent.tree||this.parent;if(this.source.selected){this.addToSelected();}
if(!this.parent.nodes.includes(this)){this.parent.nodes.push(this);}
if(this.tree.opened||(this.level<this.tree.minExpandLevel)){this.$set(this.source,'expanded',true);this.addToExpanded();}},mounted(){this.$nextTick(()=>{if(!this.animation){setTimeout(()=>{this.animation=true;},500)}
this.$set(this.source,'visible',this.isVisible);this.isMounted=true;this.$nextTick(()=>{if(this.isExpanded&&this.numChildren){let tree=this.getRef('tree');if(tree&&!tree.isLoaded&&!tree.isLoading){tree.updateData();}}
setTimeout(()=>{this.ready=true;},50)});this.resize();})},beforeDestroy(){if(this.isSelected){this.removeFromSelected(true,false);}
if(this.isExpanded){this.removeFromExpanded(true,false);}
if(this.isActive&&(this.tree.activeNode===this)){this.tree.activeNode=false;}
if(this.parent.nodes.includes(this)){this.parent.nodes.splice(this.parent.nodes.indexOf(this),1);}},watch:{doubleClk(newVal){if(newVal){setTimeout(()=>{this.doubleClk=false},500);}},isExpanded(newVal){if(newVal){if(this.addToExpanded()){let tree=this.getRef('tree');if(this.numChildren&&tree&&!tree.isLoaded){tree.updateData();}
else{this.resize();}}}
else{if(this.removeFromExpanded()){if(this.tree.selectedNode&&this.tree.isNodeOf(this.tree.selectedNode,this)){this.isActive=true;}
this.resize();}}},isSelected(newVal){if(newVal){this.addToSelected();}
else{this.removeFromSelected();}},isActive(newVal){if(newVal){if(this.tree.activeNode&&(this.tree.activeNode!==this)){this.tree.activeNode.isActive=false;}
this.tree.activeNode=this;}
else if(this.tree.activeNode===this){this.tree.activeNode=false;}
this.tree.$emit(newVal?'activate':'deactivate',this);},isVisible(newVal){this.$set(this.source,'visible',!!newVal);}}}}});})(bbn);if(bbn_resolve){bbn_resolve("ok");}})(bbn);}