(bbn_resolve)=>{((bbn)=>{let script=document.createElement('script');script.innerHTML=`<div :class="[componentClass, 'bbn-vmiddle']">
  <div v-if="currentChats.length"
       class="bbn-block bbn-vmiddle"
  >
    <div v-for="(chat, i) in currentChats"
         v-if="isReady && (chat.visible || chat.minimized)"
         :class="['bbn-right-sspace', 'bbn-vmiddle', 'bbn-p', 'bbn-reactive', 'bbn-hxspadded', {
           'bbn-state-active': chat.active,
           'bbn-state-selected': !chat.active && !!chat.unread
         }]"
         @click="toggleMinimized(chat.idx)"
         :title="getParticipantsFormatted(chat.participants)"
         :key="i"
    >
      <bbn-initial v-if="!chat.info.title && (chat.participants.length === 1)"
                   :user-name="getParticipantsFormatted(chat.participants)"
                   :width="16"
                   :height="16"
      ></bbn-initial>
      <i v-else
         class="nf nf-oct-organization bbn-lg"
      ></i>
      <span v-text="chat.info.title || shorten(getParticipantsFormatted(chat.participants), 10)"
            class="bbn-left-sspace"
      ></span>
      <span v-if="chat.unread"
            class="bbn-xs bbn-badge bbn-left-sspace bbn-primary-text-alt bbn-background"
            v-text="chat.unread"
      ></span>
    </div>
  </div>
  <div class="bbn-block bbn-p"
       @click="mainWindowVisible = !mainWindowVisible"
  >
    <i :class="['bbn-lg', 'nf nf-fa-comments', {
          'bbn-right-sspace': currentOnline && usersOnlineWithoutMe.length,
          'bbn-red': !currentOnline
        }]"
    ></i>
    <span v-if="currentOnline && usersOnlineWithoutMe.length"
          class="bbn-xs bbn-badge bbn-bg-green bbn-white"
          v-text="usersOnlineWithoutMe.length"
    ></span>
  </div>
  <div v-if="mainWindowVisible"
       class="bbn-chat-users bbn-widget bbn-flex-height"
       :style="{bottom: bottomCoord}"
  >
    <div class="bbn-header bbn-spadded bbn-no-border-top bbn-no-hborder bbn-flex-width">
      <div class="bbn-flex-fill bbn-l bbn-unselectable">
        <span class="bbn-b" v-text="_('CHAT')"></span>
        <span>(</span>
        <span v-text="currentOnline ? _('Online') : _('Offline')"
              :class="{
                'bbn-green': currentOnline,
                'bbn-red': !currentOnline
              }"
        ></span>
        <span>)</span>
      </div>
      <div>
        <bbn-context class="nf nf-mdi-menu bbn-p"
                     tabindex="-1"
                     tag="i"
                     :source="mainMenu"
        ></bbn-context>
        &nbsp;
        <i class="bbn-p nf nf-mdi-window_close"
           @click="mainWindowVisible = false"
        ></i>
      </div>
    </div>
    <div class="bbn-flex-fill">
      <bbn-scroll v-if="isReady">
        <diV class="bbn-spadded">
          <div class="bbn-box bbn-c bbn-unselectable"
               v-text="_('CURRENT CHATS')"
          ></div>
          <bbn-list :source="Object.values(currentChats)"
                    class="bbn-vsmargin"
                    :component="$options.components.active"
                    v-if="Object.values(currentChats).length"
                    @select="onSelectChat"
          ></bbn-list>
          <div v-else
               class="bbn-spadded bbn-c bbn-unselectable"
               v-text="_('None')"
          ></div>
          <div class="bbn-box bbn-c bbn-unselectable"
               v-text="_('USERS')"
          ></div>
          <bbn-list v-if="currentOnline"
                    :source="allUsersWithoutChats"
                    class="bbn-vsmargin"
                    :component="$options.components.user"
                    @select="onSelectUser"
          ></bbn-list>
          <div v-else
               class="bbn-spadded bbn-c bbn-unselectable"
               v-text="_('You are offline')"
          ></div>
        </diV>
      </bbn-scroll>
      <div v-else
           class="bbn-overlay bbn-middle"
      >
        <bbn-loadicon size="1.5em"></bbn-loadicon>
        <span class="bbn-left-sspace" v-text="_('Loading...')"></span>
      </div>
    </div>
  </div>
  <chat v-for="(chat, i) in visibleWindows"
        v-if="chat.visible"
        inline-template
        :key="chat.idx"
        :idx="chat.idx"
        :style="{
          right: (250 * i) + (mainWindowVisible ? 300 : 0) + 'px'
        }"
        :participants="chat.participants"
        :participantsActivity="chat.participantsActivity"
        :admins="chat.admins"
        :messages="chat.messages"
        :info="chat.info"
        :chat-id="chat.id"
        :user-id="userId"
        :users="users"
        :id-temp="chat.idTemp"
        :active="chat.active"
        :unread="chat.unread"
  >
    <div class="bbn-chat-conversation bbn-background bbn-flex-height"
         :style="{bottom: $parent.bottomCoord}"
         @focusin="cp.activate(idx)"
         @focusout="cp.deactivate(idx)"
         tabindex="0"
    >
      <div :class="['bbn-header', 'bbn-spadded', 'bbn-grid', {
             'bbn-state-active': active,
             'bbn-state-selected': !active && !!unread
           }]"
            style="grid-template-columns: max-content auto max-content"
      >
        <div>
          <i v-if="!isGroup"
             :class="['nf nf-fa-circle', {
               'bbn-green': cp.isOnline(participants[0]),
               'bbn-red': !cp.isOnline(participants[0])
              }]"
          ></i>
          <i v-else-if="!online.length"
             class="nf nf-fa-circle bbn-red"
          ></i>
          <i v-else-if="cp.currentOnline && (online.length === participants.length)"
             class="nf nf-fa-circle bbn-green"
             :title="onlineFormatted"
          ></i>
          <i v-else-if="cp.currentOnline && online.length"
             class="nf nf-fa-circle bbn-orange"
             :title="onlineFormatted"
          ></i>
        </div>
        <div class="bbn-w-100 bbn-ellipsis bbn-unselectable"
              v-text="currentTitle"
              :title="currentTitle"
        ></div>
        <div>
          <bbn-context class="nf nf-mdi-menu bbn-p"
                       tabindex="-1"
                       tag="i"
                       :source="getMenu"
                       v-if="cp.currentOnline"
          ></bbn-context>
          <i class="bbn-p nf nf-mdi-window_minimize bbn-left-sspace"
             @click="minimize"
          ></i>
          <i class="bbn-p nf nf-mdi-window_close bbn-left-sspace"
             @click="close"
          ></i>
        </div>
      </div>
      <div v-if="isLoading" class="bbn-middle bbn-top-xsspace bbn-s">
        <bbn-loadicon size="1.5em"></bbn-loadicon>
        <span class="bbn-left-sspace" v-text="_('Loading...')"></span>
      </div>
      <div v-if="showInfo"
           class="bbn-flex-fill bbn-bordered bbn-no-top-border bbn-alt-background"
      >
        <div class="bbn-flex-height">
          <div class="bbn-flex-fill">
            <bbn-scroll>
              <component :is="cp.$options.components.info"
                    :info="info"
                    :participants="participants"
                    :admins="admins"
                    :user-id="userId"
                    :chat-id="chatId"
                    :users="users"
              ></component>
            </bbn-scroll>
          </div>
          <bbn-button class="bbn-no-hborder bbn-no-radius bbn-no-border-bottom"
                      @click="showInfo = false"
                      :text="_('CLOSE')"
          ></bbn-button>
        </div>
      </div>
      <template v-else>
        <div class="bbn-flex-fill bbn-bordered bbn-no-vborder">
          <bbn-scroll ref="scroll"
                      @reachTop="loadMoreMessages"
                      @hook:mounted="scrollEnd"
          >
            <div class="bbn-padded">
              <div v-for="(msg, midx) in messages"
                   :key="midx"
              >
                <div v-if="!midx || (messages[midx-1] && (getDate(messages[midx-1].time) !== getDate(msg.time)))"
                     class="bbn-middle bbn-s"
                >
                  <span v-text="isToday(msg.time) ? _('Today') : getDate(msg.time)"
                        class="bbn-primary-text-alt"
                  ></span>
                </div>
                <div v-if="msg.user"
                     :class="['bbn-flex', 'bbn-vsmargin', 'bbn-vmiddle', {
                       'bbn-left-lspace': msg.user === userId,
                       'bbn-right-lspace': msg.user !== userId
                     }]"
                     :style="{justifyContent: msg.user === userId ? 'flex-end' : 'flex-start'}"
                >
                  <span :class="['bbn-chat-conversation-message', 'bbn-box', 'bbn-vxspadded', 'bbn-hspadded', 'bbn-no-border', 'bbn-flex', {
                          'bbn-alt-background': !msg.unread,
                          'bbn-border-background-alt': !msg.unread && msg.user === userId,
                          'bbn-primary': msg.unread,
                          'bbn-border-background-primary': msg.unread,
                          'bbn-chat-conversation-message-received': msg.user !== userId,
                          'bbn-chat-conversation-message-sent': msg.user === userId
                        }]"
                        :style="getStyle(msg, midx)"
                        ref="message"
                  >
                    <span>
                      <i v-if="isGroup && (msg.user !== userId)"
                         :class="['nf nf-fa-circle', 'bbn-xs', {
                           'bbn-green': cp.isOnline(msg.user),
                           'bbn-red': !cp.isOnline(msg.user)
                         }]"
                      ></i>
                      <span v-if="isGroup"
                            v-text="getField(cp.users, 'text', 'value', msg.user)"
                            :title="getField(cp.users, 'text', 'value', msg.user)"
                            class="bbn-xs"
                      ></span>
                      <br v-if="isGroup">
                      <span v-html="renderMsg(msg.message)"></span>
                    </span>
                    <span class="bbn-chat-conversation-message-time bbn-left-sspace bbn-xxs">
                      <span v-text="getTime(msg.time)"></span>
                      <i v-if="msg.user === userId"
                         :class="['nf nf-fa-check', 'bbn-left-xsspace', {
                           'bbn-primary-text-alt': isMsgRead(msg)
                         }]"
                      ></i>
                    </span>
                  </span>
                </div>
                <div v-else
                     class="bbn-middle bbn-xs"
                >
                  <span v-text="msg.message"
                        class="bbn-tertiary-text-alt"
                  ></span>
                </div>
              </div>
            </div>
          </bbn-scroll>
        </div>
        <div v-if="cp.currentOnline"
             style="min-height: 2em"
             class="bbn-flex-width"
        >
          <div class="bbn-middle bbn-bordered-left bbn-bordered-top bbn-bordered-bottom bbn-alt-background bbn-hxspadded">
            <bbn-emoji @select="addEmoji"></bbn-emoji>
          </div>
          <bbn-input class="bbn-chat-conversation-input bbn-flex-fill bbn-no-radius"
                     ref="input"
                     @keydown.enter.prevent="sendMessage"
                     v-model="currentMessage"
                     button-right="nf nf-fa-paper_plane"
                     @clickRightButton="sendMessage"
          ></bbn-input>
        </div>
      </template>
    </div>
  </chat>
</div>
`;script.setAttribute('id','bbn-tpl-component-chat');script.setAttribute('type','text/x-template');document.body.insertAdjacentElement('beforeend',script);let css=document.createElement('link');css.setAttribute('rel',"stylesheet");css.setAttribute('href',bbn.vue.libURL+"dist/js/components/chat/chat.css");document.head.insertAdjacentElement('beforeend',css);((bbn,Vue)=>{"use strict";let cp=false;Vue.component('bbn-chat',{mixins:[bbn.vue.basicComponent,bbn.vue.localStorageComponent,bbn.vue.resizerComponent,bbn.vue.serviceWorkerComponent],props:{userId:{type:String,},users:{type:Array,default(){return[];}},groups:{type:Array,default(){return[];}},onlineUsers:{type:Array,default(){return[];},},online:{type:Boolean,default:true},url:{type:String}},data(){let isDark=false;if(appui&&appui.theme&&appui.themes){isDark=bbn.fn.getField(appui.themes,'isDark',{value:appui.theme});}
return{currentOnline:this.online,mainWindowVisible:false,lastChat:null,currentChats:[],chatsHash:null,onlineUsersHash:null,usersReceived:false,chatsReceived:false,bottomCoord:'',isDarkTheme:isDark}},computed:{usersOnlineWithoutMe(){return this.onlineUsers.filter((a)=>{return a!==this.userId;}).map((a)=>{return bbn.fn.isObject(a)?a:{value:a}})},visibleWindows(){return this.currentChats.filter(c=>c.visible);},mainMenu(){let res=[];if(this.currentOnline){res.push({icon:'nf nf-oct-organization',text:bbn._('New group chat'),action:()=>{this.getPopup({title:bbn._('New group chat'),component:this.$options.components.newGroup,width:300,height:400})}});}
res.push({icon:this.currentOnline?'nf nf-mdi-message_bulleted_off bbn-red':'nf nf-mdi-message bbn-green',text:this.currentOnline?bbn._('Switch offline'):bbn._('Switch online'),action:this.currentOnline?this.switchOffline:this.switchOnline});return res;},allUsers(){if(this.users&&this.users.length){return bbn.fn.order(this.users.filter(u=>u.value!==this.userId),'text','ASC')}
return[];},allUsersWithoutChats(){let res=[];res=res.concat(this.allUsers.filter(u=>this.onlineUsers.includes(u.value)&&!Object.values(this.currentChats).filter(c=>(c.participants.length===1)&&c.participants.includes(u.value)).length))
res=res.concat(this.allUsers.filter(u=>!this.onlineUsers.includes(u.value)&&!Object.values(this.currentChats).filter(c=>(c.participants.length===1)&&c.participants.includes(u.value)).length))
return res;},isReady(){return this.chatsReceived&&this.usersReceived;}},methods:{getField:bbn.fn.getField,shorten:bbn.fn.shorten,chatById(idChat){return bbn.fn.getRow(this.currentChats,{id:idChat})},chatByIdx(idx){return bbn.fn.getRow(this.currentChats,{idx:idx})},chatByIdTemp(idTemp){return bbn.fn.getRow(this.currentChats,{idTemp:idTemp})},chatWindowByIdx(idx){return this.findByKey(idx,'chat');},chatTo(idUser){let chat=this.currentChats.filter(c=>(c.participants.length===1)&&c.participants.includes(idUser));if(chat.length){this.maximaze(chat[0].idx)
return;}
if(this.currentOnline){let chatObj={id:'',idTemp:bbn.fn.randomString(24,24),info:{title:'',creator:this.userId},participants:[idUser],partecipantsActivity:{[idUser]:0},admins:[this.userId],messages:[],visible:true,minimized:false,active:false,unread:0};this.messageToChannel({function:'addChat',params:[bbn.fn.extend(true,{},chatObj,{visible:false})]});this.activate(this.addChat(chatObj));}},addChat(chatObj){let idx=chatObj.idx!==undefined?chatObj.idx:this.getNewIdx();chatObj.idx=idx;this.currentChats.push(chatObj);return idx;},receive(data){if('online'in data){if(data.online){this.currentOnline=true;}
else{bbn.fn.each(this.currentChats,c=>{c.visible=false;c.minimized=false;})
this.currentOnline=false;}}
if(data.users&&data.users.hash){if(this.onlineUsersHash!==data.users.hash){this.onlineUsersHash=data.users.hash;this.onlineUsers.splice(0,this.onlineUsers.length);if(data.users.list){this.onlineUsers.push(...data.users.list);}}
this.usersReceived=true;}
if(data.chats){let isStarted=!!this.lastChat,chats=Object.values(data.chats.list),chatsIds=Object.keys(data.chats.list);this.chatsReceived=true;if('hash'in data.chats){this.chatsHash=data.chats.hash;}
if(!isStarted&&!this.currentChats.length){bbn.fn.each(chats,c=>{let unread=c.messages?c.messages.filter(m=>m.unread).length:0,current=bbn.fn.getRow(this.currentChats,{id:c.info.id});if(current){c.minimized=!current.active&&!!unread;c.unread=unread;c.participantsActivity=this._participantsActivity(c.participants);c.participants=bbn.fn.map(c.participants,p=>p.id);bbn.fn.iterate(c,(v,p)=>{this.$set(current,p,v);})}
else{this.addChat(bbn.fn.extend(true,{},c,{id:c.info.id,idx:this.getNewIdx(),visible:false,minimized:!!unread,active:false,unread:unread,participants:bbn.fn.map(c.participants,p=>p.id),participantsActivity:this._participantsActivity(c.participants)}))}})}
else{bbn.fn.each(this.currentChats,(c,i)=>{if(!chatsIds.includes(c.id)&&!c.idTemp){this.currentChats.splice(i,1);}})
bbn.fn.iterate(data.chats.list,(c,idChat)=>{let chat=this.chatById(idChat);if(chat){if(c.info){this.$set(chat,'info',c.info)}
if(c.messages){if(chat.messages===undefined){this.$set(chat,'messages',[]);}
if(c.messages.length){chat.messages.push(...c.messages);chat.unread+=c.messages?c.messages.filter(m=>m.unread).length:0;if(chat.visible){let cont=this.chatWindowByIdx(chat.idx);if(cont){cont.scrollEnd()}}
else if(this.currentOnline){this.minimize(chat.idx);}}}
if(c.participants){let parts=bbn.fn.map(c.participants,p=>p.id);if(!bbn.fn.isSame(parts,chat.participants)){chat.participants.splice(0);chat.participants.push(...parts);}
this.$set(chat,'participantsActivity',this._participantsActivity(c.participants));}
if(c.admins&&!bbn.fn.isSame(c.admins,chat.admins)){chat.admins.splice(0);chat.admins.push(...c.admins);}}
else{let idx=this.getNewIdx(),visible=c.info.creator&&(this.userId===c.info.creator),mess='';if(c.participants.length===1){bbn.fn.each(this.currentChats,(cc,ci)=>{if((cc.idTemp!==undefined)&&(cc.idTemp!=='')&&(cc.participants.length===1)&&cc.participants.includes(c.participants[0].id)){let cw=this.chatWindowByIdx(cc.idx);if(bbn.fn.isVue(cw)){mess=cw.currentMessage;visible=true;}
this.currentChats.splice(ci,1);return;}})}
this.addChat(bbn.fn.extend(true,{},c,{id:idChat,idx:idx,visible:visible,minimized:false,active:false,unread:c.messages?c.messages.filter(m=>m.unread).length:0,participants:bbn.fn.map(c.participants,p=>p.id),participantsActivity:this._participantsActivity(c.participants)}));if(this.currentOnline&&!visible){this.minimize(idx)}
if(mess.length){this.$nextTick(()=>{let cw=this.chatWindowByIdx(idx);if(bbn.fn.isVue(cw)){this.$set(cw,'currentMessage',mess);}});}}});}}
if('last'in data){this.lastChat=data.last;}
if(data.messages){bbn.fn.iterate(data.messages,(messages,idChat)=>{let chat=this.chatById(idChat);if(chat){if(chat.messages===undefined){this.$set(chat,'messages',[]);}
if(messages.length){chat.messages.push(...messages);chat.unread+=messages.filter(m=>m.unread).length;if(chat.visible){let cont=this.chatWindowByIdx(chat.idx);if(cont){cont.scrollEnd();}
if(chat.active){this.activate(chat.idx);}}
else if(this.currentOnline){this.minimize(chat.idx);}}}});}},getNewIdx(){let max=-1;bbn.fn.each(this.currentChats,c=>{if(c.idx>max){max=c.idx;}});return max+1;},setIdByTemp(idTemp,id){let c=bbn.fn.getRow(this.currentChats,{idTemp:idTemp});if(c){this.$set(c,'id',id);this.$set(c,'idTemp','');}},removeChatByTemp(idTemp){let idx=bbn.fn.search(this.currentChats,{idTemp:idTemp});if(idx>-1){this.currentChats.splice(idx,1);}},switchOnline(){this.post(this.url+'/actions/user/online',d=>{if(!d.success){this.alert(bbn._('You are already online'))}})},switchOffline(){this.post(this.url+'/actions/user/offline',d=>{if(!d.success){this.alert(bbn._('You are already offline'))}});},isOnline(idUser){return this.onlineUsers.includes(idUser);},getParticipants(participants){if(bbn.fn.isArray(participants)){return participants.filter(p=>p!==this.userId).map(p=>bbn.fn.getRow(this.allUsers,'value',p));}
return[];},getParticipantsFormatted(participants,separator=', '){if(bbn.fn.isArray(participants)&&participants.length){if(bbn.fn.isObject(participants[0])){return participants.map(p=>p.text).join(separator);}
else{return this.getParticipantsFormatted(this.getParticipants(participants),separator)}}
return'';},onSelectChat(data,idx,index,ev){ev.preventDefault();let chat=this.chatById(data.id);if(chat&&this.isReady){this.maximaze(chat.idx);}},onSelectUser(data,idx,index,ev){ev.preventDefault();if(this.isReady){this.chatTo(data.value);}},close(idx){let chat=bbn.fn.getRow(this.currentChats,{idx:idx});if(chat){this.$set(chat,'visible',false);}},minimize(idx){let chat=bbn.fn.getRow(this.currentChats,{idx:idx});if(chat){this.$set(chat,'minimized',true);this.close(idx);}},maximaze(idx){let chat=bbn.fn.getRow(this.currentChats,{idx:idx});if(chat){this.$set(chat,'minimized',false);this.$set(chat,'visible',true);}},toggleMinimized(idx){let chat=bbn.fn.getRow(this.currentChats,{idx:idx});if(chat){if(chat.minimized){this.maximaze(idx);}
else{this.minimize(idx);}}},activate(idx){let chat=bbn.fn.getRow(this.currentChats,{idx:idx});if(chat){this.$set(chat,'active',true);if(chat.id){this.setLastActivity(chat.id,this.userId);}
setTimeout(()=>{this.removeUnread(idx)},2000);this.messageToChannel({function:'removeUnread',params:[idx]});}},removeUnread(idx){let chat=bbn.fn.getRow(this.currentChats,{idx:idx});if(chat){if(chat.unread){this.$set(chat,'unread',0);}
if(!!chat.messages&&chat.messages.length){for(let i=chat.messages.length-1;i>-1;i--){if((chat.messages[i].user!==this.userId)&&(chat.messages[i].unread!==undefined)){if(!chat.messages[i].unread){break;}
this.$set(chat.messages[i],'unread',false);}}}}},deactivate(idx){let chat=bbn.fn.getRow(this.currentChats,{idx:idx});if(chat){this.$set(chat,'active',false);if(chat.id){this.setLastActivity(chat.id,this.userId);}}},setLastActivity(idChat,idUser){if(idChat&&idUser&&this.currentOnline){this.post(this.url+'/actions/chat/activity',{id_chat:idChat,id_user:idUser});}},_participantsActivity(list){let res={};bbn.fn.each(list,l=>res[l.id]=l.lastActivity);return res;},_setCoord(){let coord=this.$el.offsetParent.getBoundingClientRect();this.bottomCoord=`${coord.bottom - coord.top}px`;}},created(){cp=this;},mounted(){this.$nextTick(()=>{this._setCoord();this.ready=true;})},watch:{mainWindowVisible:{immediate:true,handler(newVal){if(newVal){this._setCoord();}}}},components:{chat:{name:'chat',mixins:[bbn.vue.basicComponent],props:{idx:{type:Number},userId:{type:String,default:''},chatId:{type:String,default:''},participants:{type:Array,default(){return[]}},participantsActivity:{type:Object,default(){return{}}},admins:{type:Array,default(){return[]}},messages:{type:Array,default(){return[]}},users:{type:Array,default(){return[]}},info:{type:Object,default(){return{title:''}}},idTemp:{type:String,default:''},active:{type:Boolean,default:false},unread:{type:Number,default:0}},data(){return{currentMessage:'',cp:cp,isLoading:false,showInfo:false,isSending:false,receivedBackground:''}},computed:{isGroup(){return(this.participants.length>1)||this.info.title},currentTitle(){return this.info.title||this.cp.getParticipantsFormatted(this.participants)},online(){return this.participants.filter(p=>this.cp.isOnline(p))},onlineFormatted(){return this.online.length?bbn._('Online participants')+':\n'+this.cp.getParticipantsFormatted(this.online,'\n'):'';}},methods:{getField:bbn.fn.getField,getMenu(){let res=[];if(this.cp.currentOnline){res.push({text:bbn._('Info'),icon:'nf nf-fa-info',action:()=>{this.showInfo=true;}});res.push({text:bbn._('Leave the chat'),icon:'nf nf-mdi-comment_remove',action:()=>{this.confirm(bbn._('Are you sure you want to leave this chat?'),()=>{this.leave();})}});if(this.info.creator===this.userId){res.push({text:bbn._('Destroy the chat'),icon:'nf nf-fa-trash',action:()=>{this.confirm(bbn._('Are you sure you want to destroy this chat?'),()=>{this.destroy();})}});}}
return res;},close(){if(this.idTemp&&!this.chatId&&!this.messages.length){return this.destroy();}
this.cp.close(this.idx);},minimize(){this.cp.minimize(this.idx);},leave(){if(this.chatId){this.post(this.cp.url+'/actions/chat/leave',{id_chat:this.chatId},d=>{if(!d.success){this.alert(bbn._("Impossible to leave the chat!"))}})}
else if(this.idTemp){this.cp.currentChats.splice(bbn.fn.search(this.cp.currentChats,{idx:this.idx}),1);}},destroy(){if(this.chatId){this.post(this.cp.url+'/actions/chat/destroy',{id_chat:this.chatId},d=>{if(!d.success){this.alert(bbn._("Impossible to destroy the chat!"))}})}
else if(this.idTemp){this.cp.currentChats.splice(bbn.fn.search(this.cp.currentChats,{idx:this.idx}),1);this.cp.messageToChannel({function:'removeChatByTemp',params:[this.idTemp]})}},sendMessage(){if(this.currentMessage){this.isSending=true;this.post(this.cp.url+'/actions/message/new',{id_chat:this.chatId||null,id_temp:this.idTemp||null,users:this.participants,text:this.currentMessage},d=>{if(d.success){if(this.idTemp&&d.id_chat){this.cp.setIdByTemp(this.idTemp,d.id_chat);this.cp.messageToChannel({function:'setIdByTemp',params:[this.idTemp,d.id_chat]})
this.isSending=false;}
this.cp.setLastActivity(this.chatId,this.userId);}})
this.currentMessage='';}},scrollEnd(){let sc=this.getRef('scroll');if(sc){sc.onResize(true).then(()=>{sc.scrollEndY();});}},renderMsg(msg){msg=bbn.fn.html2text(msg);let matches=msg.match(/(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9]\.[^\s]{2,})/g);if(matches){bbn.fn.each(matches,(v)=>{if(v.indexOf(bbn.env.host)===0){msg=msg.replace(v,'<a href="javascript:;" onclick="bbn.fn.link(\''+v.substr(bbn.env.host.length+1)+'\')">'+v.substr(bbn.env.host.length+1)+'</a>');}
else{msg=msg.replace(v,'<a href="'+v+'" target="_blank">'+v+'</a>');}})}
return msg;},getTime(t){return dayjs.unix(t).format('HH:mm');},getDate(d){return dayjs.unix(d).format('DD MMMM YYYY');},isToday(d){return dayjs().format('DD/MM/YYYY')===dayjs.unix(d).format('DD/MM/YYYY');},loadMoreMessages(){if(this.messages.length){this.isLoading=true;this.post(this.cp.url+'/actions/message/previous',{id_chat:this.chatId,time:this.messages[0].time},d=>{this.isLoading=false;if(d.messages&&d.messages.length){this.messages.unshift(...d.messages);}},e=>{this.isLoading=false;});}},isMsgRead(msg){if(msg.time){return!this.participants.filter(p=>!this.participantsActivity[p]||(this.participantsActivity[p]<msg.time)).length;}
return false;},getStyle(msg,idx){let sent=msg.user===this.userId,ret={};if(this.$refs.message&&!sent&&!msg.unread){if(this.receivedBackground){ret.backgroundColor=this.receivedBackground+'!important';ret.borderColor=this.receivedBackground;}}
return ret;},addEmoji(emoji){this.currentMessage+=(this.currentMessage.lenght?' ':'')+String.fromCodePoint('0x'+emoji);}},created(){let el=document.createElement('div');el.classList.add('bbn-alt-background');document.body.append(el);this.receivedBackground=bbn.fn.lightenDarkenHex(bbn.fn.rgb2hex(getComputedStyle(el).backgroundColor),this.cp.isDarkTheme?30:-30);el.remove();},mounted(){if(this.cp.currentOnline){this.getRef('input').focus()}}},user:{template:`
<div class="bbn-grid bbn-p bbn-vmiddle bbn-vxsmargin"
      style="grid-template-columns: max-content auto max-content"
>
  <div class="bbn-middle" style="min-width: 1.5em">
    <bbn-initial :user-name="source.text"
                :width="16"
                :height="16"
    ></bbn-initial>
  </div>
  <div class="bbn-ellipsis bbn-w-100"
       v-text="source.text"
  ></div>
  <div class="bbn-middle" style="min-width: 1.5em">
    <i :class="{
         'nf nf-fa-circle': cp.isOnline(source.value),
         'bbn-green': cp.isOnline(source.value)
       }"
    ></i>
  </div>
</div>
        `,name:'user',props:{source:{type:Object}},data(){return{cp:cp}}},active:{template:`
<div class="bbn-grid bbn-p bbn-vmiddle bbn-vxsmargin"
      style="grid-template-columns: max-content auto max-content max-content"
      :title="participantsFormatted"
>
  <div class="bbn-middle" style="min-width: 1.5em">
    <bbn-initial :user-name="participantsFormatted"
                 :width="16"
                 :height="16"
                 v-if="!isGroup && !source.info.title"
    ></bbn-initial>
    <i v-else
       class="nf nf-oct-organization"></i>
  </div>
  <div class="bbn-ellipsis bbn-w-100"
       v-text="source.info.title || participantsFormatted"
  ></div>
  <div class="bbn-middle">
    <span v-if="source.unread"
          class="bbn-xs bbn-badge bbn-primary"
          v-text="source.unread">
    </span>
  </div>
  <div class="bbn-middle" style="min-width: 1.5em">
    <i v-if="cp.currentOnline && (online.length === participants.length)"
       class="nf nf-fa-circle bbn-green"
       :title="onlineFormatted"
    ></i>
    <i v-else-if="cp.currentOnline && isGroup && online.length"
       class="nf nf-fa-circle bbn-orange"
       :title="onlineFormatted"
    ></i>
  </div>
</div>
        `,name:'active',props:{source:{type:Object}},data(){return{cp:cp}},computed:{participants(){return this.cp.getParticipants(this.source.participants);},participantsFormatted(){if(this.participants){return this.cp.getParticipantsFormatted(this.participants,'\n');}
return'';},isGroup(){return this.participants.length>1;},online(){return this.participants.filter(p=>this.cp.isOnline(p.value))},onlineFormatted(){return this.online.length&&this.isGroup?bbn._('Online participants')+':\n'+this.cp.getParticipantsFormatted(this.online,'\n'):'';}}},info:{template:`
<div class="bbn-spadded">
  <div v-if="(participants.length > 1) || info.title || titleVisible"
       class="bbn-header bbn-c"
  >`+bbn._('TITLE')+`</div>
  <div v-if="(participants.length > 1) || info.title || titleVisible"
       class="bbn-flex-width bbn-vmiddle bbn-top-sspace"
  >
    <bbn-input class="bbn-flex-fill bbn-right-sspace"
              v-model="currentTitle"
              :readonly="!isAdmin"
    ></bbn-input>
    <bbn-button icon="nf nf-fa-save"
                :notext="true"
                @click="saveTitle"
                v-if="isAdmin && chatId && currentTitle"
    ></bbn-button>
  </div>
  <div class="bbn-header bbn-top-sspace bbn-vmiddle">
    <div class="bbn-flex-fill bbn-c">`+bbn._('PARTICIPANTS')+`</div>
    <div class="bbn-hsmargin">
      <i v-if="isAdmin"
         class="bbn-p nf nf-fa-plus"
         @click="onAddUserClick"
      ></i>
    </div>
  </div>
  <div class="bbn-spadded bbn-bordered bbn-grid bbn-no-border-top"
      style="grid-template-columns: max-content auto max-content"
  >
    <template v-for="p in currentParticipants">
      <div class="bbn-middle"
          style="min-width: 1.5em"
      >
        <bbn-initial :user-name="p.text"
                    :width="16"
                    :height="16"
        ></bbn-initial>
      </div>
      <div class="bbn-ellipsis bbn-w-100"
          v-text="p.text"
      ></div>
      <div class="bbn-middle"
          style="min-width: 1.5em"
      >
        <template v-if="isAdmin">
          <i v-if="!admins.includes(p.value) || isCreator"
            class="bbn-p nf nf-fa-trash bbn-red bbn-left-sspace"
            @click="removeUser(p.value)"
          ></i>
          <i v-if="isCreator"
            :class="['bbn-p', 'nf nf-fa-star', 'bbn-left-sspace', {
              'bbn-primary-text-alt': admins.includes(p.value)
            }]"
            @click="toggleAdmin(p.value)"
          ></i>
        </template>
      </div>
    </template>
  </div>
</div>
        `,name:'info',props:{chatId:{type:String,default:''},userId:{type:String,required:true},info:{type:Object,required:true},participants:{type:Array,defauult(){return[]}},admins:{type:Array,defauult(){return[]}},users:{type:Array,default(){return[]}},titleVisible:{type:Boolean,default:false}},data(){return{currentTitle:this.info.title||''}},computed:{currentParticipants(){return cp.getParticipants(this.participants);},isCreator(){return this.userId===this.info.creator},isAdmin(){return this.admins.includes(this.userId)}},methods:{saveTitle(){if(this.chatId){this.post(cp.url+'/actions/chat/title',{id_chat:this.chatId,title:this.currentTitle},d=>{if(d.success){this.$set(this.info,'title',this.currentTitle)}
else{this.alert(bbn._("Impossible to save the chat'stitle"));}})}},toggleAdmin(idUser){let idx=this.admins.indexOf(idUser);if(idx===-1){this.addAdmin(idUser)}
else{this.removeAdmin(idUser)}},onAddUserClick(){this.getPopup({title:bbn._('Select user'),component:this.$options.components.users,source:{participants:this.participants,creator:this.info.creator,onSelect:this.addUser},scrollable:false,width:300})},addUser(idUser){if(!this.participants.includes(idUser)&&this.admins.includes(this.userId)){if(this.chatId){this.post(cp.url+'/actions/user/add',{id_chat:this.chatId,id_user:idUser},(d)=>{if(!d.success){this.alert(bbn._("Impossible to add the user!"))}})}
else{let title=cp.getParticipantsFormatted(this.participants);this.participants.push(idUser);if(this.info.title===title){this.$set(this.info,'title',cp.getParticipantsFormatted(this.participants))}}}},removeUser(idUser){if(this.participants.includes(idUser)&&(!this.admins.includes(idUser)||((idUser!==this.info.creator)&&(this.userId===this.info.creator)))){this.confirm(bbn._('Are you sure you want to remove this user from the chat?'),()=>{let remove=()=>{let title=cp.getParticipantsFormatted(this.participants),changeTitle=this.info.title===title;this.participants.splice(this.participants.indexOf(idUser),1);if(changeTitle){this.$set(this.info,'title',cp.getParticipantsFormatted(this.participants))}};if(this.chatId){this.post(cp.url+'/actions/user/remove',{id_chat:this.chatId,id_user:idUser},(d)=>{if(d.success){remove();}
else{this.alert(bbn._("Impossible to remove the user!"))}})}
else{remove();}})}},addAdmin(idUser){if((this.userId===this.info.creator)&&(idUser!==this.userId)&&!this.admins.includes(idUser)){if(this.chatId){this.post(cp.url+'/actions/admin/add',{id_chat:this.chatId,id_user:idUser},d=>{if(d.success){this.admins.push(idUser);}
else{this.alert(bbn._('Impossibile to set this user as admin!'))}})}
else{this.admins.push(idUser);}}},removeAdmin(idUser){if((this.userId===this.info.creator)&&(idUser!==this.userId)&&this.admins.includes(idUser)){if(this.chatId){this.post(cp.url+'/actions/admin/remove',{id_chat:this.chatId,id_user:idUser},d=>{if(d.success){this.admins.splice(this.admins.indexOf(idUser),1);}
else{this.alert(bbn._('Impossibile to set this user as admin!'))}})}
else{this.admins.splice(this.admins.indexOf(idUser),1);}}},},watch:{currentTitle(newVal){this.$emit('titleChanged',newVal)},'info.title'(newVal){this.currentTitle=newVal;}},components:{users:{template:`
<div class="bbn-vpadded bbn-overlay">
  <bbn-tree :source="users"></bbn-tree>
</div>
            `,name:'users',props:{source:{type:Object}},data(){return{users:bbn.fn.map(cp.users.filter(u=>!this.source.participants.includes(u.value)&&(u.value!==this.source.creator)),u=>{return bbn.fn.extend(true,{component:this.$options.components.user},u)})}},components:{user:{template:`
<span class="bbn-iblock bbn-p" @click="select">
  <bbn-initial :user-name="source.text"
               :width="16"
               :height="16"
  ></bbn-initial>
  <span class="bbn-left-sspace"
        v-text="source.text"
  ></span>
</span>
                `,name:'user',props:{source:{type:Object}},methods:{select(){this.closest('bbn-tree').$parent.source.onSelect(this.source.value);this.getPopup().close();}}}}}}},newGroup:{template:`
<bbn-form :validation="validation"
          :source="chat"
          :action="cp.url + '/actions/chat/group'"
>
  <component :is="cp.$options.components.info"
             :info="{
               title: '',
               creator: cp.userId
             }"
             :participants="chat.participants"
             :admins="chat.admins"
             :user-id="cp.userId"
             :users="cp.users"
             @titleChanged="title => chat.title = title"
             :titleVisible="true"
  ></component>
</bbn-form>
        `,name:'newGroup',data(){return{cp:cp,chat:{title:'',participants:[cp.userId],admins:[cp.userId]}}},methods:{validation(d){if(d.participants.length<3){this.alert(bbn._('Two or more participants are required'));return false;}
if(!d.title){this.alert('The title is required')
return false;}
return true}}}}});})(bbn,Vue);if(bbn_resolve){bbn_resolve("ok");}})(bbn);}