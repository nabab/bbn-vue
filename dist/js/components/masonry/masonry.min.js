(bbn_resolve)=>{((bbn)=>{let script=document.createElement('script');script.innerHTML=`<div :class="[componentClass, {'bbn-ovaerlay': scrollable}]">
  <slot></slot>
  <div v-if="isLoading"
      :class="['bbn-background', 'bbn-middle', 'bbn-padded', {
        'bbn-overlay': scrollable,
      }]">
    <bbn-loadicon class="bbn-vmiddle"
                  :size="24"/>
    <span class="bbn-xl bbn-b bbn-left-sspace"
          v-text="_('Loading') + '...'"/>
  </div>
  <component :is="scrollable ? 'bbn-scroll' : 'div'"
             v-else-if="total">
    <div class="bbn-masonry-columns-container"
         :style="containerStyle">
      <masonry-col v-for="(col, index) in cols"
                   :key="'masonry-col-' + index"
                   :index="index"
                   :source="items.filter((it, i) => {
                     return i % cols === index;
                   })"
                   inline-template>
        <div :style="colStyle"
             class="bbn-masonry-column">
          <masonry-item v-for="(item, idx) in source"
                        :source="item"
                        :key="'masonry-item-' + index + '-' + idx"
                        inline-template>
            <div class="bbn-masonry-column-item"
                 :style="itemStyle">
              <component :is="source.data.component"
                         :source="source.data.source"
                         v-if="!source.slot"/>
              <div v-else
                   v-html="source.content"/>
            </div>
          </masonry-item>
        </div>
      </masonry-col>
    </div>
  </component>
</div>`;script.setAttribute('id','bbn-tpl-component-masonry');script.setAttribute('type','text/x-template');document.body.insertAdjacentElement('beforeend',script);let css=document.createElement('link');css.setAttribute('rel','stylesheet');css.setAttribute('href',bbn.vue.libURL+'dist/js/components/masonry/masonry.css');document.head.insertAdjacentElement('beforeend',css);(bbn=>{"use strict";if(Vue.options.components['bbns-masonry']===undefined){Vue.component('bbns-masonry',{template:'<div class="bbns-masonry bbn-hidden"><slot></slot></div>'});}
Vue.component('bbn-masonry',{mixins:[bbn.vue.basicComponent,bbn.vue.resizerComponent,bbn.vue.listComponent],props:{scrollable:{type:Boolean,default:true},columnGap:{type:Number,default:20},rowGap:{type:Number,default:20},minCol:{type:Number,default:1},maxCol:{type:Number},itemWidth:{type:Number,default:350},},data(){return{fromSlot:[]}},computed:{cols(){return parseInt(this.lastKnownWidth /(this.itemWidth+this.columnGap))||1},containerStyle(){return{gridTemplateColumns:`repeat(${this.cols}, 1fr)`,gridGap:`${this.columnGap}px`}},items(){let d=[...this.currentData];if(this.fromSlot.length){let idx=this.currentData.length;bbn.fn.each(this.fromSlot,s=>{d.push({index:idx,slot:true,content:s.content});idx++;})}
return d;}},mounted(){this.$nextTick(()=>{this.ready=true;});},components:{slotItem:{name:'bbns-masonry'},masonryCol:{name:'masonry-col',props:{source:{type:Array,default(){return[];}},index:{type:Number}},computed:{masonry(){return this.closest('bbn-masonry');},colStyle(){return{width:'100%',margin:`0 ${(this.index + 1) < this.masonry.cols ? this.masonry.columnGap : 0}px 0 0`,verticalAlign:'top',display:'inline-block'}}},components:{masonryItem:{name:'masonry-item',props:{source:{type:[String,Object]}},computed:{col(){return this.closest('masonry-col');},itemStyle(){return{marginBottom:this.col.index<this.col.masonry.cols?this.col.masonry.rowGap+'px':0}}}}}}}});})(bbn);if(bbn_resolve){bbn_resolve("ok");}})(bbn);}