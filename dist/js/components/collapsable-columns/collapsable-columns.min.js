(bbn_resolve)=>{((bbn)=>{let script=document.createElement('script');script.innerHTML=`<div :class="[componentClass, {'bbn-overlay': !!scrollable}]">
  <component :is="scrollable ? 'bbn-scroll' : 'div'"
             axis="x"
             ref="scroll">
    <div :class="['bbn-collapsable-columns-container', 'bbn-grid', 'bbn-padded', {'bbn-h-100': !!scrollable}]"
         :style="{'grid-auto-rows': !!scrollable ? '100%': ''}">
      <bbn-column-list  v-for="(col, idx) in filteredData"
                        :source="col.data[children]"
                        :data="data"
                        :children="children"
                        :index="col.index"
                        :key="symbol()"
                        :pageable="pageable"
                        :filterable="childrenFilterable"
                        :filters="typeof childrenFilters === 'function' ? childrenFilters(col.data, data, idx) : childrenFilters"
                        :sortable="childrenSortable"
                        :order="childrenOrder"
                        :limit="childrenLimit"
                        :collapsable="true"
                        :auto-collapse="collapseEmpty"
                        :width="columnWidth"
                        :scrollable="scrollable"
                        :background-color="col.data[sourceBackgroundColor]"
                        :font-color="col.data[sourceFontColor]"
                        :title="col.data.title"
                        :toolbar="!!col.data[sourceToolbar] ? col.data[sourceToolbar] : toolbar"
                        :toolbar-source="col.data"
                        :component="!!col.data[sourceComponent] ? col.data[sourceComponent] : realComponent"
                        :component-options="!!col.data[sourceComponentOptions] ? col.data[sourceComponentOptions] : componentOptions"
                        @beforemount="c => columns.push(c)"
                        @beforedestroy="removeColumn"
                        @expanded="c => $emit('expanded', c)"
                        @collapse="c => $emit('collapsed', c)"
                        :uid="uid"
                        :start-hidden="true"/>
    </div>
  </component>
</div>`;script.setAttribute('id','bbn-tpl-component-collapsable-columns');script.setAttribute('type','text/x-template');document.body.insertAdjacentElement('beforeend',script);let css=document.createElement('link');css.setAttribute('rel','stylesheet');css.setAttribute('href',bbn.vue.libURL+'dist/js/components/collapsable-columns/collapsable-columns.css');document.head.insertAdjacentElement('beforeend',css);(bbn=>{"use strict";Vue.component('bbn-collapsable-columns',{mixins:[bbn.vue.basicComponent,bbn.vue.listComponent],props:{toolbar:{type:[String,Object,Vue]},sourceBackgroundColor:{type:String,default:'backgroundColor'},sourceFontColor:{type:String,default:'fontColor'},sourceToolbar:{type:String,default:'toolbar'},sourceComponent:{type:String,default:'component'},scrollable:{type:Boolean,default:true},columnWidth:{type:[Number,String],default:'40rem'},childrenFilterable:{type:Boolean,default:false},childrenFilters:{type:[Object,Function],default(){return{logic:'AND',conditions:[]};}},childrenSortable:{type:Boolean,default:false},childrenOrder:{type:[Array,Object],default(){return[];}},collapseEmpty:{type:Boolean,default:true},componentOptions:{type:Object},sourceComponentOptions:{type:String,default:'componentOptions'},limit:{type:Number,default:0},childrenLimit:{type:Number,default:10}},data(){return{columns:[]}},methods:{symbol:Symbol,_map(data){if(bbn.fn.isArray(data)){if(data.length&&!bbn.fn.isObject(data[0])&&!bbn.fn.isArray(data[0])&&this.sourceValue&&this.sourceText){data=data.map(a=>{return{[this.sourceValue]:a,[this.sourceText]:a};});}
data=data.map(a=>{a.opened=false;return a;});return(this.map?data.map(this.map):data).slice();}
return[];},collapseAll(){bbn.fn.each(this.columns,c=>{c.collapse();});},expandAll(){bbn.fn.each(this.columns,c=>{c.expand();});},setAllCheckCollapse(){bbn.fn.each(this.columns,c=>c.setCheckCollapse(true));},removeColumn(column){if(this.columns.length&&column.bbnUid){let idx=bbn.fn.search(this.columns,'bbnUid',column.bbnUid);if(idx>-1){this.columns.splice(idx,1);}}}}});})(bbn);if(bbn_resolve){bbn_resolve("ok");}})(bbn);}