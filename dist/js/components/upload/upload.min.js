(bbn_resolve)=>{((bbn)=>{let script=document.createElement('script');script.innerHTML=`<div :class="[componentClass, 'bbn-box', 'bbn-spadded']">
    <div v-if="ready && showList"
         style="z-index: 2">
      <div v-for="(f, idx) in currentData"
           :class="['bbn-flex-width', 'bbn-bordered', 'bbn-spadded', 'bbn-vmiddle', {
             'bbn-alt-background': (f.status !== 'progress') && (f.status !== 'error'),
             'bbn-background-tertiary': f.status === 'progress',
             'bbn-bg-red': f.status === 'error',
             'bbn-bottom-sspace': currentData[idx+1],
             'bbn-alt-dark': !!(idx % 2),
             'bbn-primary-text-alt': f.status === 'ready'
           }]"
      >
        <div v-if="icons">
          <i :class="['bbn-large', getFileIcon(f)]"/>
        </div>
        <div v-else-if="thumbs"
             class="bbn-upload-thumb bbn-block">
          <template v-if="isFile(f)">
            <img v-if="f.data.type.startsWith('image/')"
                 :src="getThumbURL(f)">
            <video v-else-if="f.data.type.startsWith('video/')"
                   muted>
              <source :src="getThumbURL(f)"
                      :type="f.data.type">
              <div class="bbn-middle">
                <i :class="['bbn-large', getFileIcon(f)]"/>
              </div>
            </video>
            <object v-else-if="f.data.type === 'application/pdf'"
                    :data="getThumbURL(f)"/>
            <div v-else
                 class="bbn-middle">
              <i :class="['bbn-large', getFileIcon(f)]"/>
            </div>
          </template>
          <img v-else-if="getThumbURL(f)"
               :src="getThumbURL(f)">
          <div v-else
               class="bbn-middle">
            <i :class="['bbn-large', getFileIcon(f)]"/>
          </div>
          <div class="bbn-overlay" style="opacity: 0;"/>
        </div>
        <div class="bbn-flex-fill bbn-hmargin">
          <div v-if="f.edit === false"
               :class="{
                 'bbn-abs': f.status === 'progress',
                 'bbn-h-100': f.status === 'progress',
                 'bbn-vmiddle': f.status === 'progress'
               }"
               :style="{'z-index': f.status === 'progress' ? 2 : 0}"
          >
            <span v-text="f.data.name"></span>
            <span v-if="showFilesize"
                  class="bbn-left-sspace bbn-i bbn-s"
            >({{getFileSize(f)}})</span>
          </div>
          <bbn-input v-else-if="f.status !== 'progress'"
                     v-model="f.edit"
                     class="bbn-w-100"
                     :placeholder="currentText.filename"
                     ref="filenameInput"
          ></bbn-input>
          <bbn-progressbar v-if="(f.edit === false) && (f.status === 'progress')"
                           :value="f.progress"
                           :show-value="true"
                           type="percent"
                           class="bbn-no-border"
                           style="text-align: right"
                           bar-class="bbn-background-tertiary"
          ></bbn-progressbar>
        </div>
        <div>
          <div v-if="isEnabled && (f.edit === false)">
            <i v-if="(f.status === 'success') && !!downloadable && !!downloadUrl && !uploading"
              class="bbn-large nf nf-fa-download bbn-p bbn-right-sspace"
              @click="download(f)"
              :title="currentText.download"
            ></i>
            <i v-if="(f.status === 'success') && editable && !uploading"
              class="bbn-large nf nf-fa-edit bbn-p bbn-right-sspace"
              @click="edit(f)"
              :title="currentText.editFilename"
            ></i>
            <i v-if="f.status === 'error'"
              class="bbn-large nf nf-fa-repeat bbn-p bbn-right-sspace"
              @click="retry(f)"
              :title="currentText.retry"
            ></i>
            <i v-if="eliminable && (f.status !== 'progress') && !uploading"
              class="bbn-large nf nf-fa-trash bbn-p"
              @click="remove(f)"
              :title="currentText.remove"
            ></i>
            <bbn-loadicon v-if="f.status === 'progress'"></bbn-loadicon>
          </div>
          <div v-else-if="isEnabled && (f.edit !== false) && !uploading">
            <i class="bbn-large nf nf-fa-check bbn-p bbn-right-sspace"
               @click="saveEdit(f)"
               :title="currentText.save"
            ></i>
            <i class="bbn-large nf nf-fa-close bbn-p"
               @click="cancelEdit(f)"
               :title="currentText.cancel"
            ></i>
          </div>
          <div v-else-if="(f.status === 'success') && !!downloadable && !!downloadUrl && !uploading">
            <i class="bbn-large nf nf-fa-download bbn-p"
               @click="download(f)"
               :title="currentText.download"
            ></i>
          </div>
        </div>
      </div>
      <div v-if="!currentData.length && !isEnabled"
           class="bbn-c"
           v-text="currentText.empty"
      ></div>
    </div>
    <div v-if="isEnabled"
         class="bbn-rel"
         :style="{
           'padding-top': !!currentData.length && canAddFile ? '.5rem' : '0',
           'z-index': 2
         }"
    >
      <div class="bbn-flex-width bbn-vmiddle">
        <i v-if="canAddFile"
           :class="[icon, 'bbn-primary-text-alt', 'bbn-xlarge']"
        ></i>
        <div v-if="canAddFile"
             class="bbn-flex-fill bbn-primary-text-alt bbn-hsmargin"
             @click="getRef('fileInput').click()"
             v-text="dragDrop ? currentText.uploadOrDrop : currentText.uploadButton"
             @drop="dropEvent"
        ></div>
        <div class="bbn-box bbn-spadded"
             ref="pasteContainer"
             v-if="paste && canAddFile"
             style="z-index: 2"
             :title="currentText.pasteContainer"
             @paste="pasteEvent"
        >
          <i class="nf nf-fa-paste bbn-large"></i>
        </div>
        <div class="bbn-box bbn-spadded bbn-p"
             ref="uploadButton"
             v-if="canAddFile && !autoUpload && !!filesReady.length"
             style="z-index: 2"
             :title="currentText.upload"
             @click="upload()"
        >
          <i class="nf nf-fa-upload bbn-large"></i>
        </div>
        <input title=""
               :disabled="!!isDisabled || !canAddFile"
               ref="fileInput"
               type="file"
               :multiple="multiple"
               :accept="accept"
               @change="filesChanged"
               class="bbn-invisible bbn-abs bbn-top-left bbn-bottom-right bbn-100"
               style="z-index: 1"
               @drop="dropEvent"
        >
        <input type="hidden"
               :value="value"
               :readonly="readonly"
               :required="required"
               ref="element"
        >
      </div>
    </div>
</div>`;script.setAttribute('id','bbn-tpl-component-upload');script.setAttribute('type','text/x-template');document.body.insertAdjacentElement('beforeend',script);let css=document.createElement('link');css.setAttribute('rel','stylesheet');css.setAttribute('href',bbn.vue.libURL+'dist/js/components/upload/upload.css');document.head.insertAdjacentElement('beforeend',css);(bbn=>{"use strict";Vue.component('bbn-upload',{mixins:[bbn.vue.basicComponent,bbn.vue.inputComponent],props:{showList:{type:Boolean,default:true},value:{type:[Array,String],default(){return[];}},saveUrl:{type:String,default:null},removeUrl:{type:String,default:null},downloadUrl:{type:String,default:null},autoUpload:{type:Boolean,default:true},multiple:{type:Boolean,default:true},max:{type:Number,default:0},disabled:{type:Boolean,default:false},editable:{type:Boolean,default:false},downloadable:{type:Boolean,default:false},eliminable:{type:Boolean,default:true},uploadable:{type:Boolean,default:true},icons:{type:Boolean,default:true},thumbs:{type:Boolean,default:false},maxSize:{type:Number,default:60},thumbWaiting:{type:String},json:{type:Boolean,default:false},text:{type:Object,default(){return{}}},icon:{type:String,default:'nf nf-fa-upload'},extensions:{type:Array,default(){return[];}},accept:{type:String,default:'*'},paste:{type:Boolean,default:false},dragDrop:{type:Boolean,default:true},data:{type:Object},showFilesize:{type:Boolean,default:true}},data(){return{currentData:[],uploading:false};},computed:{currentText(){return bbn.fn.extend({uploadButton:bbn._('Choose files'),dropHere:bbn._('Drop files here'),pasteContainer:bbn._('Click on the container and then press CTRL+V keys to paste the file'),uploadOrDrop:bbn._('Choose files or drop files here'),retry:bbn._('Retry'),editFilename:bbn._('Edit filename'),remove:bbn._('Delete'),removeConfirm:bbn._('Are you sure you want to delete this file?'),empty:bbn._('no files'),download:bbn._('Download'),save:bbn._('Save'),cancel:bbn._('Cancel'),filename:bbn._('Write the filename without the extension'),upload:bbn._('Upload')},this.text);},canAddFile(){return this.uploadable&&!this.uploading&&(this.multiple&&(!this.max||(this.filesCount<this.max)))||(!this.multiple&&!this.filesCount)},filesReady(){return this.currentData.filter(d=>{return d.status==='ready'})},filesProgress(){return this.currentData.filter(d=>{return d.status==='progress'})},filesError(){return this.currentData.filter(d=>{return d.status==='error'})},filesSuccess(){return this.currentData.filter(d=>{return d.status==='success'})},filesCount(){return this.filesReady.length+this.filesProgress.length+this.filesSuccess.length},isEnabled(){return!this.isDisabled&&!this.readonly}},methods:{_setStatus(id,status){if(id){let idx=bbn.fn.search(this.currentData,{id:id})
if(idx>-1){this.$set(this.currentData[idx],'status',status)
return true}}
return false},_makeFile(file,fromUser,status,fromPaste){return{id:bbn.fn.randomInt(1000,9999),data:file,status:status||'ready',fromUser:fromUser,fromPaste:!!fromPaste,edit:false,progress:0}},_makeFiles(files,fromUser,status){if(!this.ready||!this.isDisabled){if(files instanceof FileList){files=Object.values(files)}
files=this._filterFiles(bbn.fn.map(files,file=>{return this._makeFile(file,fromUser,status)}))
bbn.fn.each(files,file=>{if(!this.ready||this.canAddFile){this._addFile(file)}})
if(this.ready&&this.autoUpload){this.$nextTick(()=>{this.upload()})}}
if(this.getRef('fileInput')){this.getRef('fileInput').value=null}},_addFile(file){this.currentData.push(file)},_remove(file,res){let idx=bbn.fn.search(this.currentData,{id:file.id})
if(idx>-1){this.currentData.splice(idx,1)
this.$emit('remove',file.id,res,false);this.$nextTick(()=>{this.setValue()})}},_filterFiles(files){return bbn.fn.filter(files,file=>{if(!file.data.name||((file.data.size!==undefined)&&!file.data.size)){return false}
if(bbn.fn.getRow(this.currentData,{'data.name':file.data.name})){if(file.fromUser){this.$emit('error',{file:file.data.name,message:bbn._('The file exists!')})
this.alert(bbn._('The file')+` "${file.data.name}" `+bbn._('exists')+'!')}
return false}
if(bbn.fn.isArray(this.extensions)&&this.extensions.length){let ext=file.data.name.substring(file.data.name.lastIndexOf('.')+1).toLowerCase(),extensions=bbn.fn.map(this.extensions,e=>{return e.toLowerCase();});if(!extensions.includes(ext)){if(file.fromUser){this.$emit('error',{file:file.data.name,message:bbn._('The extension')+` "${ext}" `+bbn._('is not allowed')+'!'})
this.alert(bbn._('The extension')+` "${ext}" `+bbn._('is not allowed')+'!')}
return false}}
return true})},_getData(file){if(file.data){return{name:file.data.name,size:file.data.size,extension:file.data.name.substring(file.data.name.lastIndexOf('.'))}}
return{}},getValue(){let res;if((typeof this.value==='string')&&this.json){res=JSON.parse(this.value)}
else if(bbn.fn.isArray(this.value)){res=this.value}
return bbn.fn.isArray(res)?res:[]},filesChanged(e){if(e.target.files.length){this._makeFiles(e.target.files,true)}},upload(id){if(this.uploadable&&this.filesReady.length){this.uploading=true;if(id){this.setStatusProgress(id);}
else{bbn.fn.each(this.filesReady,fr=>{this.setStatusProgress(fr.id);});}
this.$nextTick(()=>{bbn.fn.each(this.filesProgress,fr=>{if((id===undefined)||(fr.id===id)){let ev=new Event('beforeUpload',{cancelable:true});this.$emit('beforeUpload',ev,fr);if(!ev.defaultPrevented){if(this.saveUrl){bbn.fn.upload(this.saveUrl,bbn.fn.extend(true,{},this.data?this.data:{},{file:fr.data}),res=>{let f=false;if(res.data.file||res.data.fichier){f=res.data.file||res.data.fichier}
else if(res.data.data&&(res.data.data.file||res.data.data.fichier)){f=res.data.data.file||res.data.data.fichier}
if(f&&f.name!==fr.data.name){this.setName(fr.id,f.name,false)}
if(this.setStatusSuccess(fr.id)){this.$nextTick(()=>{this.$emit('success',fr.id,f.name||fr.data.name,res.data,res)})}},err=>{if(this.setStatusError(fr.id)){this.$emit('error',fr.id,err)
bbn.fn.log('bbn-upload error',fr.id,err)}},prog=>{this.setProgress(fr.id,prog)})}
else{if(this.setStatusSuccess(fr.id)){this.$nextTick(()=>{this.$emit('success',fr.id,fr.data.name,fr.data)})}}}}})})}},setName(id,name,setVal=true){if(id&&name){let idx=bbn.fn.search(this.currentData,{id:id})
if(idx>-1){if(this.currentData[idx].fromUser){const newFile=new File([this.currentData[idx].data],name,{type:this.currentData[idx].data.type})
this.$set(this.currentData[idx],'data',newFile)}
else{this.$set(this.currentData[idx].data,'name',name)}
if(setVal){this.$nextTick(()=>{this.setValue()})}
return true}}
return false},setStatusReady(id){return this._setStatus(id,'ready')},setStatusError(id){return this._setStatus(id,'error')},setStatusSuccess(id){return this._setStatus(id,'success')},setStatusProgress(id){return this._setStatus(id,'progress')},setValue(){let value=bbn.fn.map(this.filesSuccess,f=>{if(f.data instanceof File){return{name:f.data.name,size:f.data.size,extension:bbn.fn.substr(f.data.name,f.data.name.lastIndexOf('.'))}}
return bbn.fn.extend(true,{},f.data,{size:f.data.size,extension:bbn.fn.substr(f.data.name,f.data.name.lastIndexOf('.'))});})
this.emitInput(this.json?JSON.stringify(value):value)
this.$emit('change',this.value);},setProgress(id,progress=0){if(bbn.fn.isArray(this.currentData)&&this.currentData.length){let file=bbn.fn.getRow(this.currentData,{id:id})
if(bbn.fn.isObject(file)){this.$set(file,'progress',progress)}}},edit(file){file.edit=bbn.fn.substr(file.data.name,0,file.data.name.lastIndexOf('.'))},saveEdit(file){const name=`${file.edit}.${this.getFileExt(file)}`;if(file.edit&&(file.name!==name)){let old=bbn.fn.extend(true,{},file.data)
if(file.fromUser){const newFile=new File([file.data],name,{type:file.data.type})
this.$set(file,'data',newFile)}
else{this.$set(file.data,'name',name)}
if(file.fromPaste&&(file.status==='ready')){this.upload(file.id)}
else{this.$emit('edit',file.id,name,old.name)}
this.$nextTick(()=>{this.setValue()})}
file.edit=false},cancelEdit(file){if(file.fromPaste&&(file.status==='ready')){this.currentData.splice(bbn.fn.search(this.currentData,{id:file.id}),1)}
else{file.edit=false}},retry(file){if(this.setStatusReady(file.id)){this.upload(file.id)}},remove(file,force){let ev=new Event('beforeRemove',{cancelable:true});this.$emit('beforeRemove',ev,file);if(force||!ev.defaultPrevented){this.confirm(this.currentText.removeConfirm,()=>{if(this.removeUrl){this.post(this.removeUrl,bbn.fn.extend(true,{},this.data?this.data:{},{file:file.data.name}),d=>{this._remove(file,d)})}
else{this._remove(file)}})}},pasteEvent(event){if(event.clipboardData.files.length&&this.canAddFile){let file=this._makeFile(event.clipboardData.files[0],true,'ready',true)
file.edit=''
this._addFile(file)
this.$nextTick(()=>{this.getRef('filenameInput').focus()})}},dropEvent(event){if(!this.dragDrop){event.preventDefault();}},download(file){if(!!this.downloadable&&!!this.downloadUrl){this.postOut(this.downloadUrl,bbn.fn.extend(true,{},this.data?this.data:{},{file:file.data.name}))}},getFileSize(file){return bbn.fn.formatBytes(file.data.size)},getFileIcon(file){switch(this.getFileExt(file)){case'pdf':return'nf nf-fa-file_pdf_o'
case'zip':return'nf nf-fa-file_zip_o'
case'rar':case'tar':case'bz2':case'gz':case'7z':case'cab':case'cab':return'nf nf-fa-file_archive_o'
case'jpg':case'jpeg':case'png':case'gif':case'bmp':case'svg':return'nf nf-fa-file_image_o'
case'avi':case'mov':case'mkv':case'mpg':case'mpeg':case'wmv':case'mp4':return'nf nf-fa-file_movie_o'
case'mp3':case'wav':return'nf nf-fa-file_sound_o'
case'php':case'js':case'html':case'htm':case'css':case'less':return'nf nf-fa-file_code_o'
case'txt':case'rtf':return'nf nf-fa-file_text_o'
case'doc':case'docx':case'odt':return'nf nf-fa-file_word_o'
case'xls':case'xlsx':case'ods':case'csv':return'nf nf-fa-file_excel_o'
case'ppt':case'pptx':case'odp':return'nf nf-fa-file_powerpoint_o'
default:return'nf nf-fa-file'}},getFileExt(file){return file.fromUser?file.data.name.substring(file.data.name.lastIndexOf('.')+1):bbn.fn.substr(file.data.extension,1)},getThumbURL(file){return this.isFile(file)?URL.createObjectURL(file.data):(!!file.data.thumb&&bbn.fn.isURL(file.data.thumb)?file.data.thumb:'');},isFile(file){return file.data instanceof File;}},mounted(){this.$nextTick(()=>{if(this.value){this._makeFiles(this.getValue(),false,'success')}
this.ready=true})},watch:{value:{deep:true,handler(newVal,oldVal){if(!bbn.fn.isSame(newVal,oldVal)){this.currentData.splice(0);}
this.$nextTick(()=>{this._makeFiles(this.getValue(),false,'success')});}},filesProgress(newVal,oldVal){if(!bbn.fn.isSame(newVal,oldVal)&&!newVal.length){this.uploading=false;if(!this.filesError.length){this.$emit('complete',this.filesSuccess,this.filesError)
this.$nextTick(()=>{this.setValue();})}}}}});})(bbn);if(bbn_resolve){bbn_resolve("ok");}})(bbn);}